{"version":3,"sources":["components/preview/ArtworkPreviewInfo.tsx","components/preview/LoadingArtworkPreview.tsx","components/preview/MetArtworkPreview.tsx","components/preview/ArtworkPreviewProxy.tsx","components/preview/ArtworkPreviewsList.tsx","components/WideIconButton.tsx","assets/icons/white/chevronDownWhite.svg","components/LoadMoreButton.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","hooks/useMetCollectionIDs.ts","hooks/useRandomSpecifiedCollectionIDs.ts","pages/CollectionPage.tsx"],"names":["ArtworkPreviewInfo","props","className","artworkName","artworkType","artistName","artworkOrigin","artworkDate","LoadingArtworkPreview","MetArtworkPreview","useGetMetArtworkByIDQuery","id","data","isLoading","onClick","handleClick","src","primaryImageSmall","alt","title","objectName","artistDisplayName","objectDate","country","ArtworkPreviewProxy","CurrentPreview","met","source","navigate","useNavigate","ArtworkPreviewsList","specifiedIDs","map","specID","WideIconButton","backgroundColor","hoverBackgroundColor","LoadMoreButton","loadMoreSrc","ColorName","Yellow","Red","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","useMetCollectionIDs","collection","depID","CollectionType","Antiquity","Asia","MiddleAges","useGetMetDepartmentArtworksIDsQuery","ids","useRandomSpecifiedCollectionIDs","amount","usedIDs","metIDs","specMetIDs","getRandomSpecifiedIDs","CollectionPage","useMemo","split","word","charAt","toUpperCase","slice","join","initialIDs","storageIDs","sessionStorage","getItem","JSON","parse","useState","length","setLength","usedIDsRef","useRef","current","displayIDs","setItem","stringify","PageTitle","text","underlined"],"mappings":"2FACA,iBA0BeA,IAhBuB,SAACC,GACrC,OACE,0BAASC,UAAU,eAAnB,UACE,6BAAKD,EAAME,cACVF,EAAMG,aAAe,+BAAOH,EAAMG,cACnC,4CACWH,EAAMI,WAAaJ,EAAMI,WAAa,oBAEhDJ,EAAMK,eACL,qDAAwBL,EAAMK,iBAEhC,+BAAOL,EAAMM,mB,4KCPJC,EAZmB,kBAChC,qBAAIN,UAAU,0BAAd,UACE,qBAAKA,UAAU,0BACf,qBAAIA,UAAU,uBAAd,UACE,uBACA,uBACA,uBACA,8BCmBSO,G,MAlBsB,SAACR,GACpC,MAA4BS,YAA0BT,EAAMU,IAApDC,EAAR,EAAQA,KAER,OAFA,EAAcC,YAEID,EAAa,cAAC,EAAD,IAE7B,qBAAIV,UAAU,kBAAkBY,QAASb,EAAMc,YAA/C,UACE,qBAAKC,IAAKJ,EAAKK,kBAAmBC,IAAI,YACtC,cAAClB,EAAA,EAAD,CACEG,YAAaS,EAAKO,MAClBf,YAAaQ,EAAKQ,WAClBf,WAAYO,EAAKS,kBACjBd,YAAaK,EAAKU,WAClBhB,cAAeM,EAAKW,e,OCDbC,EAZwB,SAACvB,GACtC,IAGMwB,EAHW,CACfC,IAAKjB,GAEyBR,EAAM0B,QAEhCC,EAAWC,cAGjB,OAAO,cAACJ,EAAD,CAAgBd,GAAIV,EAAMU,GAAII,YAFjB,kBAAMa,EAAS,MAAD,OAAO3B,EAAM0B,OAAb,YAAuB1B,EAAMU,S,MCIlDmB,IAZwB,SAAC7B,GAAD,OACrC,oBAAIU,GAAG,gBAAP,SACGV,EAAM8B,aAAaC,KAAI,SAACC,GAAD,OACtB,cAAC,EAAD,CAEEtB,GAAIsB,EAAOtB,GACXgB,OAAQM,EAAON,QAHjB,UACUM,EAAOtB,IADjB,OACsBsB,EAAON,gB,sDCOpBO,EATmB,SAACjC,GAAD,OAChC,wBACEC,UAAS,8BAAyBD,EAAMkC,gBAA/B,qBAA2DlC,EAAMmC,sBAC1EtB,QAASb,EAAMc,YAFjB,SAIE,qBAAKC,IAAKf,EAAMe,IAAKE,IAAI,mBChBd,MAA0B,6C,QCkB1BmB,IATmB,SAACpC,GAAD,OAChC,cAAC,EAAD,CACEe,IAAKsB,EACLH,gBAAiBI,IAAUC,OAC3BJ,qBAAsBG,IAAUE,IAChC1B,YAAad,EAAMc,gB,0FCVR,SAAS2B,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,sHIW/EC,EAba,SAACC,GAAiD,IAAD,EAMrEC,GALgB,mBACnBC,IAAeC,UAAY,IADR,cAEnBD,IAAeE,KAAO,GAFH,cAGnBF,IAAeG,WAAa,IAHT,GAKSL,GAC/B,EAAiCM,YAAoCL,GAAvDM,EAAd,EAAQlD,KAER,OAFA,EAAmBC,YAEDiD,EAAY,KACvBA,G,QCMMC,EAdyB,SACtCC,EACAT,EACAU,GAEA,IAAMC,EAASZ,EAAoBC,GAC/BY,EAAmC,GAKvC,OAJID,IACFC,EAAaC,YAAsBJ,EAAQ,MAAOE,EAAQD,GAC1DE,EAAU,sBAAOF,GAAP,YAAmBE,KAExBA,G,uCCsCME,UAxCmB,SAACpE,GACjC,IAAMsD,EAAatD,EAAMsD,WAEnBpC,EAAQmD,mBACZ,kBACEf,EACGgB,MAAM,KACNvC,KAAI,SAACwC,GAAD,OAAUA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MACxDC,KAAK,OACV,CAACrB,IAGGsB,EAAmCP,mBAAQ,WAC/C,IAAMQ,EAAaC,eAAeC,QAAQzB,GAC1C,OAAOuB,EAAaG,KAAKC,MAAMJ,GAAc,KAC5C,CAACvB,IACJ,EAA4B4B,mBAC1BN,EAAWO,OAASP,EAAWO,OAAS,GAD1C,mBAAOA,EAAP,KAAeC,EAAf,KAGMC,EAAaC,iBAAOV,GAC1BS,EAAWE,QAAUzB,EACnBqB,EAASE,EAAWE,QAAQJ,OAC5BnF,EAAMsD,WACN+B,EAAWE,SAGb,IAAMvB,EAAUqB,EAAWE,QACrBC,EAAaxB,EAAQmB,OAAS,GAAKnB,EAAQU,OAAO,IAAMV,EAG9D,OAFAc,eAAeW,QAAQnC,EAAY0B,KAAKU,UAAUF,IAE7CA,EAAWL,OAEd,sBAAKzE,GAAG,kBAAR,UACE,cAACiF,EAAA,EAAD,CAAWC,KAAM1E,EAAO2E,YAAY,IACpC,cAAChE,EAAA,EAAD,CAAqBC,aAAc0D,IACnC,cAACpD,EAAA,EAAD,CAAgBtB,YAAa,kBAAMsE,EAAUD,EAAS,SAL3B,cAAC,IAAD","file":"static/js/3.5d0c5eb7.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport '../css/preview/ArtworkPreviewInfo.css';\r\n\r\ninterface Props {\r\n  artworkName: string;\r\n  artworkType?: string;\r\n  artistName: string;\r\n  artworkDate: string;\r\n  artworkOrigin: string;\r\n}\r\n\r\nconst ArtworkPreviewInfo: FC<Props> = (props) => {\r\n  return (\r\n    <section className=\"preview-info\">\r\n      <h2>{props.artworkName}</h2>\r\n      {props.artworkType && <span>{props.artworkType}</span>}\r\n      <span>\r\n        Artist: {props.artistName ? props.artistName : 'Unknown artist'}\r\n      </span>\r\n      {props.artworkOrigin && (\r\n        <span>Place of origin: {props.artworkOrigin}</span>\r\n      )}\r\n      <span>{props.artworkDate}</span>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ArtworkPreviewInfo;\r\n","import { FC } from 'react';\r\nimport '../css/preview/LoadingArtworkPreview.css';\r\n\r\nconst LoadingArtworkPreview: FC = () => (\r\n  <li className=\"loading-artwork-preview\">\r\n    <div className=\"loading-preview-image\" />\r\n    <ul className=\"loading-preview-info\">\r\n      <li />\r\n      <li />\r\n      <li />\r\n      <li />\r\n    </ul>\r\n  </li>\r\n);\r\n\r\nexport default LoadingArtworkPreview;\r\n","import { FC } from 'react';\r\nimport { useGetMetArtworkByIDQuery } from '../../apis/metApi';\r\nimport ArtworkPreviewInfo from '../../components/preview/ArtworkPreviewInfo';\r\nimport LoadingArtworkPreview from './LoadingArtworkPreview';\r\nimport '../css/preview/ArtworkPreview.css';\r\n\r\ninterface Props {\r\n  id: number;\r\n  handleClick: () => void;\r\n}\r\n\r\nconst MetArtworkPreview: FC<Props> = (props) => {\r\n  const { data, isLoading } = useGetMetArtworkByIDQuery(props.id);\r\n\r\n  if (isLoading || !data) return <LoadingArtworkPreview />;\r\n  return (\r\n    <li className=\"artwork-preview\" onClick={props.handleClick}>\r\n      <img src={data.primaryImageSmall} alt=\"artwork\" />\r\n      <ArtworkPreviewInfo\r\n        artworkName={data.title}\r\n        artworkType={data.objectName}\r\n        artistName={data.artistDisplayName}\r\n        artworkDate={data.objectDate}\r\n        artworkOrigin={data.country}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default MetArtworkPreview;\r\n","import { FC } from 'react';\r\nimport MetArtworkPreview from '../../components/preview/MetArtworkPreview';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { DataSource } from '../../types/SpecifiedArtworkID';\r\n\r\ninterface Props {\r\n  source: DataSource;\r\n  id: number;\r\n}\r\n\r\nconst ArtworkPreviewProxy: FC<Props> = (props) => {\r\n  const previews = {\r\n    met: MetArtworkPreview,\r\n  };\r\n  const CurrentPreview = previews[props.source];\r\n\r\n  const navigate = useNavigate();\r\n  const handleClick = () => navigate(`../${props.source}/${props.id}`);\r\n\r\n  return <CurrentPreview id={props.id} handleClick={handleClick} />;\r\n};\r\n\r\nexport default ArtworkPreviewProxy;\r\n","import { FC } from 'react';\r\nimport { SpecifiedArtworkID } from '../../types/SpecifiedArtworkID';\r\nimport ArtworkPreviewProxy from '../../components/preview/ArtworkPreviewProxy';\r\nimport '../css/preview/ArtworkPreviewsList.css';\r\n\r\ninterface Props {\r\n  specifiedIDs: SpecifiedArtworkID[];\r\n}\r\n\r\nconst ArtworkPreviewsList: FC<Props> = (props) => (\r\n  <ul id=\"previews-list\">\r\n    {props.specifiedIDs.map((specID) => (\r\n      <ArtworkPreviewProxy\r\n        key={`${specID.id}${specID.source}`}\r\n        id={specID.id}\r\n        source={specID.source}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default ArtworkPreviewsList;\r\n","import React, { FC } from 'react';\r\nimport { ColorName } from '../types/ColorName';\r\nimport './css/WideIconButton.css';\r\n\r\ninterface Props {\r\n  src: string;\r\n  backgroundColor: ColorName;\r\n  hoverBackgroundColor: ColorName;\r\n  handleClick: () => void;\r\n}\r\n\r\nconst WideIconButton: FC<Props> = (props) => (\r\n  <button\r\n    className={`wide-icon-button bg-${props.backgroundColor} bg-hover-${props.hoverBackgroundColor}`}\r\n    onClick={props.handleClick}\r\n  >\r\n    <img src={props.src} alt=\"icon-button\" />\r\n  </button>\r\n);\r\n\r\nexport default WideIconButton;\r\n","export default __webpack_public_path__ + \"static/media/chevronDownWhite.46f89c78.svg\";","import { FC } from 'react';\nimport WideIconButton from './WideIconButton';\nimport loadMoreSrc from '../assets/icons/white/chevronDownWhite.svg';\nimport { ColorName } from '../types/ColorName';\n\ninterface Props {\n  handleClick: () => void;\n}\n\nconst LoadMoreButton: FC<Props> = (props) => (\n  <WideIconButton\n    src={loadMoreSrc}\n    backgroundColor={ColorName.Yellow}\n    hoverBackgroundColor={ColorName.Red}\n    handleClick={props.handleClick}\n  />\n);\n\nexport default LoadMoreButton;\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useGetMetDepartmentArtworksIDsQuery } from '../apis/metApi';\r\nimport { CollectionType } from '../types/CollectionType';\r\n\r\nconst useMetCollectionIDs = (collection: CollectionType): number[] | null => {\r\n  const metDepartmentIDs = {\r\n    [CollectionType.Antiquity]: 13,\r\n    [CollectionType.Asia]: 6,\r\n    [CollectionType.MiddleAges]: 17,\r\n  };\r\n  const depID = metDepartmentIDs[collection];\r\n  const { data: ids, isLoading } = useGetMetDepartmentArtworksIDsQuery(depID);\r\n\r\n  if (isLoading || !ids) return null;\r\n  return ids;\r\n};\r\n\r\nexport default useMetCollectionIDs;\r\n","import useMetCollectionIDs from './useMetCollectionIDs';\r\nimport { CollectionType } from '../types/CollectionType';\r\nimport { SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\r\nimport getRandomSpecifiedIDs from '../actions/getRandomSpecifiedIDs';\r\n\r\nconst useRandomSpecifiedCollectionIDs = (\r\n  amount: number,\r\n  collection: CollectionType,\r\n  usedIDs: SpecifiedArtworkID[]\r\n): SpecifiedArtworkID[] => {\r\n  const metIDs = useMetCollectionIDs(collection);\r\n  let specMetIDs: SpecifiedArtworkID[] = [];\r\n  if (metIDs) {\r\n    specMetIDs = getRandomSpecifiedIDs(amount, 'met', metIDs, usedIDs);\r\n    specMetIDs = [...usedIDs, ...specMetIDs];\r\n  }\r\n  return specMetIDs;\r\n};\r\n\r\nexport default useRandomSpecifiedCollectionIDs;\r\n","import { CollectionType } from '../types/CollectionType';\nimport { FC, useMemo, useRef, useState } from 'react';\nimport ArtworkPreviewsList from '../components/preview/ArtworkPreviewsList';\nimport { SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\nimport useRandomSpecifiedCollectionIDs from '../hooks/useRandomSpecifiedCollectionIDs';\nimport PageTitle from '../components/PageTitle';\nimport LoadMoreButton from '../components/LoadMoreButton';\nimport { PageLoadingSpinner } from '../components/LoadingSpinner';\nimport './css/CollectionPage.css';\n\ninterface Props {\n  collection: CollectionType;\n}\n\nconst CollectionPage: FC<Props> = (props) => {\n  const collection = props.collection;\n\n  const title = useMemo(\n    () =>\n      collection\n        .split(' ')\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' '),\n    [collection]\n  );\n\n  const initialIDs: SpecifiedArtworkID[] = useMemo(() => {\n    const storageIDs = sessionStorage.getItem(collection);\n    return storageIDs ? JSON.parse(storageIDs) : [];\n  }, [collection]);\n  const [length, setLength] = useState(\n    initialIDs.length ? initialIDs.length : 5\n  );\n  const usedIDsRef = useRef(initialIDs);\n  usedIDsRef.current = useRandomSpecifiedCollectionIDs(\n    length - usedIDsRef.current.length,\n    props.collection,\n    usedIDsRef.current\n  );\n\n  const usedIDs = usedIDsRef.current;\n  const displayIDs = usedIDs.length > 15 ? usedIDs.slice(-15) : usedIDs;\n  sessionStorage.setItem(collection, JSON.stringify(displayIDs));\n\n  if (!displayIDs.length) return <PageLoadingSpinner />;\n  return (\n    <div id=\"collection-page\">\n      <PageTitle text={title} underlined={true} />\n      <ArtworkPreviewsList specifiedIDs={displayIDs} />\n      <LoadMoreButton handleClick={() => setLength(length + 5)} />\n    </div>\n  );\n};\n\nexport default CollectionPage;\n"],"sourceRoot":""}