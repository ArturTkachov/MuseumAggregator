{"version":3,"sources":["components/preview/ArtworkPreviewInfo.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/artwork-page/ImageViewerList.tsx","components/artwork-page/ImageViewer.tsx","assets/icons/white/chevronRightWhite.svg","components/artwork-page/ExpandableWIkiInfo.tsx","assets/icons/yellow/starYellow.svg","assets/icons/red/starRed.svg","components/FavouriteButton.tsx","components/artwork-page/MetArtworkPage.tsx","pages/ArtworkPageProxy.tsx"],"names":["ArtworkPreviewInfo","props","className","artworkName","artworkType","artistName","artworkOrigin","artworkDate","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ImageViewerListItem","index","onClick","e","handleClick","src","image","alt","ImageViewerList","images","setIndex","eventLi","currentTarget","ul","closest","children","li","classList","add","remove","map","ImageViewer","useState","activeIndex","imgRef","useRef","useEffect","img","current","style","transitionDuration","opacity","setTimeout","id","ref","ExpandableWIkiInfo","isOpen","setOpen","searchValues","useGetWikiSearchResultsQuery","query","skip","data","length","pageid","page","useGetWikiPageByIDQuery","Number","Boolean","divRef","useLayoutEffect","innerHTML","extract","text","arrowSrc","FavouriteButton","dispatch","useAppDispatch","specID","favourites","useAppSelector","state","isInFavourites","containsSpecifiedID","removeFavourite","addFavourite","redStar","yellowStar","hoverColor","ColorName","Red","Yellow","IconButton","size","hoverIconColor","White","hoverBackgroundColor","MetArtworkPage","useParams","useGetMetArtworkByIDQuery","isLoading","PageTitle","title","underlined","primaryImage","additionalImages","artistDisplayName","objectDate","country","specifyID","ArtworkPageProxy","source","pages","met","CurrentPage"],"mappings":"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","file":"static/js/5.7e0e0fea.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport '../css/preview/ArtworkPreviewInfo.css';\r\n\r\ninterface Props {\r\n  artworkName: string;\r\n  artworkType?: string;\r\n  artistName: string;\r\n  artworkDate: string;\r\n  artworkOrigin: string;\r\n}\r\n\r\nconst ArtworkPreviewInfo: FC<Props> = (props) => {\r\n  return (\r\n    <section className=\"preview-info\">\r\n      <h2>{props.artworkName}</h2>\r\n      {props.artworkType && <span>{props.artworkType}</span>}\r\n      <span>\r\n        Artist: {props.artistName ? props.artistName : 'Unknown artist'}\r\n      </span>\r\n      {props.artworkOrigin && (\r\n        <span>Place of origin: {props.artworkOrigin}</span>\r\n      )}\r\n      <span>{props.artworkDate}</span>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ArtworkPreviewInfo;\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FC, MouseEvent, Dispatch, SetStateAction } from 'react';\r\n\r\ninterface ListProps {\r\n  images: string[];\r\n  setIndex: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst ImageViewerList: FC<ListProps> = (props) => {\r\n  const images = props.images;\r\n\r\n  const handleClick = (e: MouseEvent<HTMLLIElement>, index: number) => {\r\n    props.setIndex(index);\r\n    const eventLi = e.currentTarget;\r\n    const ul = eventLi.closest<HTMLUListElement>('ul');\r\n    if (!ul) return;\r\n    for (let li of ul.children) {\r\n      if (li === eventLi) {\r\n        li.classList.add('active');\r\n      } else {\r\n        li.classList.remove('active');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {images.map((image, index) => (\r\n        <ImageViewerListItem\r\n          key={image}\r\n          image={image}\r\n          index={index}\r\n          handleClick={handleClick}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\ninterface ListItemProps {\r\n  image: string;\r\n  index: number;\r\n  handleClick: (e: MouseEvent<HTMLLIElement>, index: number) => void;\r\n}\r\n\r\nconst ImageViewerListItem: FC<ListItemProps> = (props) => (\r\n  <li\r\n    className={props.index === 0 ? 'active' : ''}\r\n    onClick={(e) => props.handleClick(e, props.index)}\r\n  >\r\n    <img src={props.image} alt=\"artwork\" />\r\n  </li>\r\n);\r\n\r\nexport default ImageViewerList;\r\n","import { FC, useState, useRef, useEffect } from 'react';\r\nimport ImageViewerList from './ImageViewerList';\r\nimport '../css/artwork-page/ImageViewer.css';\r\n\r\ninterface Props {\r\n  images: string[];\r\n}\r\n\r\nconst ImageViewer: FC<Props> = (props) => {\r\n  const [activeIndex, setIndex] = useState(0);\r\n  const images = props.images;\r\n\r\n  const imgRef = useRef<HTMLImageElement>(null);\r\n  useEffect(() => {\r\n    const img = imgRef.current;\r\n    if (img) {\r\n      img.style.transitionDuration = '0s';\r\n      img.style.opacity = '0.4';\r\n      setTimeout(() => {\r\n        img.style.transitionDuration = '0.8s';\r\n        img.style.opacity = '1';\r\n      }, 25);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div id=\"image-viewer\">\r\n      <img ref={imgRef} src={images[activeIndex]} alt=\"big artwork\" />\r\n      <ImageViewerList images={images} setIndex={setIndex} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageViewer;\r\n","export default __webpack_public_path__ + \"static/media/chevronRightWhite.02bcafaa.svg\";","import { FC, useLayoutEffect, useRef, useState } from 'react';\r\nimport {\r\n  useGetWikiPageByIDQuery,\r\n  useGetWikiSearchResultsQuery,\r\n} from '../../apis/wikiApi';\r\nimport arrowSrc from '../../assets/icons/white/chevronRightWhite.svg';\r\nimport '../css/artwork-page/ExpandableWikiInfo.css';\r\n\r\ninterface Props {\r\n  text: string;\r\n  query: string;\r\n}\r\n\r\nconst ExpandableWIkiInfo: FC<Props> = (props) => {\r\n  const [isOpen, setOpen] = useState(false);\r\n  const { data: searchValues } = useGetWikiSearchResultsQuery(props.query, {\r\n    skip: !isOpen,\r\n  });\r\n\r\n  const id =\r\n    searchValues && searchValues.length ? searchValues[0].pageid : null;\r\n  const { data: page } = useGetWikiPageByIDQuery(Number(id), {\r\n    skip: !Boolean(id),\r\n  });\r\n\r\n  const divRef = useRef<HTMLDivElement>(null);\r\n  useLayoutEffect(() => {\r\n    if (divRef.current && page) divRef.current.innerHTML = page.extract;\r\n  });\r\n\r\n  return (\r\n    <div className=\"expandable-wiki-info\">\r\n      <div className=\"wiki-info-name\" onClick={() => setOpen(!isOpen)}>\r\n        {props.text}\r\n        <img src={arrowSrc} alt=\">\" className={isOpen ? 'rotated' : ''} />\r\n      </div>\r\n      {isOpen && <div ref={divRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpandableWIkiInfo;\r\n","export default __webpack_public_path__ + \"static/media/starYellow.de25db34.svg\";","export default __webpack_public_path__ + \"static/media/starRed.cfbdca58.svg\";","import { FC } from 'react';\r\nimport IconButton from '../components/IconButton';\r\nimport { useAppDispatch, useAppSelector } from '../store';\r\nimport { containsSpecifiedID } from '../actions/getRandomSpecifiedIDs';\r\nimport { addFavourite, removeFavourite } from '../feautres/favouritesSlice';\r\nimport yellowStar from '../assets/icons/yellow/starYellow.svg';\r\nimport redStar from '../assets/icons/red/starRed.svg';\r\nimport { SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\r\nimport { ColorName } from '../types/ColorName';\r\n\r\ninterface Props {\r\n  specID: SpecifiedArtworkID;\r\n}\r\n\r\nconst FavouriteButton: FC<Props> = (props) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const specID = props.specID;\r\n  const favourites = useAppSelector((state) => state.favourites);\r\n  const isInFavourites = containsSpecifiedID(specID, favourites);\r\n  const handleClick = isInFavourites\r\n    ? () => dispatch(removeFavourite(specID))\r\n    : () => dispatch(addFavourite(specID));\r\n\r\n  const src = isInFavourites ? redStar : yellowStar;\r\n  const hoverColor = isInFavourites ? ColorName.Red : ColorName.Yellow;\r\n\r\n  return (\r\n    <IconButton\r\n      size=\"normal\"\r\n      src={src}\r\n      hoverIconColor={ColorName.White}\r\n      hoverBackgroundColor={hoverColor}\r\n      handleClick={handleClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FavouriteButton;\r\n","import { FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { PageParams } from '../../types/PageParams';\r\nimport { useGetMetArtworkByIDQuery } from '../../apis/metApi';\r\nimport PageTitle from '../../components/PageTitle';\r\nimport ImageViewer from './ImageViewer';\r\nimport ExpandableWIkiInfo from './ExpandableWIkiInfo';\r\n\r\nimport ArtworkPreviewInfo from '../../components/preview/ArtworkPreviewInfo';\r\nimport FavouriteButton from '../../components/FavouriteButton';\r\nimport specifyID from '../../actions/specifyID';\r\n\r\nconst MetArtworkPage: FC = () => {\r\n  const { id } = useParams<PageParams>();\r\n  const { data, isLoading } = useGetMetArtworkByIDQuery(Number(id));\r\n\r\n  if (isLoading || !data) return <div>Loading page...</div>;\r\n  return (\r\n    <>\r\n      <PageTitle text={data.title} underlined={true} />\r\n      <ImageViewer images={[data.primaryImage, ...data.additionalImages]} />\r\n      <ArtworkPreviewInfo\r\n        artworkName={data.title}\r\n        artistName={data.artistDisplayName}\r\n        artworkDate={data.objectDate}\r\n        artworkOrigin={data.country}\r\n      />\r\n      <FavouriteButton specID={specifyID('met', Number(id))} />\r\n      <ExpandableWIkiInfo text=\"Artwork wiki\" query={data.title} />\r\n      {data.artistDisplayName && (\r\n        <ExpandableWIkiInfo text=\"Artist wiki\" query={data.artistDisplayName} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MetArtworkPage;\r\n","import { FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport MetArtworkPage from '../components/artwork-page/MetArtworkPage';\r\nimport { PageParams } from '../types/PageParams';\r\nimport './css/ArtworkPage.css';\r\n\r\nconst ArtworkPageProxy: FC = () => {\r\n  const { source } = useParams<PageParams>();\r\n  const pages = {\r\n    met: MetArtworkPage,\r\n  };\r\n\r\n  if (!source) return <p>no such source type</p>;\r\n  const CurrentPage = pages[source];\r\n\r\n  return (\r\n    <div id=\"artwork-page\">\r\n      <CurrentPage />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArtworkPageProxy;\r\n"],"sourceRoot":""}