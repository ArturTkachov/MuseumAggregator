{"version":3,"sources":["components/preview/ArtworkPreviewInfo.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/artwork-page/ImageViewerList.tsx","components/artwork-page/ImageViewer.tsx","assets/icons/white/chevronRightWhite.svg","components/Expandable.tsx","components/artwork-page/LoadingText.tsx","components/artwork-page/WikiInfo.tsx","components/artwork-page/ExpandableWIkiInfo.tsx","assets/icons/yellow/starYellow.svg","assets/icons/red/starRed.svg","components/FavouriteButton.tsx","components/artwork-page/MetArtworkPage.tsx","pages/ArtworkPageProxy.tsx"],"names":["ArtworkPreviewInfo","props","className","artworkName","artworkType","artistName","artworkOrigin","artworkDate","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ImageViewerListItem","index","onClick","e","handleClick","src","image","alt","ImageViewerList","images","setIndex","eventLi","currentTarget","ul","closest","children","li","classList","add","remove","map","ImageViewer","useState","activeIndex","imgRef","useRef","useEffect","img","current","style","transitionDuration","opacity","setTimeout","id","ref","Expandable","isOpen","setIsOpen","text","arrowSrc","LoadingText","lis","i","push","WikiInfo","useGetWikiSearchResultsQuery","query","searchValues","data","isSearching","isLoading","length","pageid","useGetWikiPageByIDQuery","Number","skip","Boolean","page","isParsing","divRef","useLayoutEffect","innerHTML","extract","ExpandableWIkiInfo","FavouriteButton","dispatch","useAppDispatch","specID","favourites","useAppSelector","state","isInFavourites","containsSpecifiedID","removeFavourite","addFavourite","redStar","yellowStar","hoverColor","ColorName","Red","Yellow","IconButton","size","hoverIconColor","White","hoverBackgroundColor","MetArtworkPage","useParams","useGetMetArtworkByIDQuery","PageTitle","title","underlined","primaryImage","additionalImages","artistDisplayName","objectDate","country","specifyID","ArtworkPageProxy","source","pages","met","CurrentPage"],"mappings":"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","file":"static/js/5.86113dbc.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport '../css/preview/ArtworkPreviewInfo.css';\r\n\r\ninterface Props {\r\n  artworkName: string;\r\n  artworkType?: string;\r\n  artistName: string;\r\n  artworkDate: string;\r\n  artworkOrigin: string;\r\n}\r\n\r\nconst ArtworkPreviewInfo: FC<Props> = (props) => {\r\n  return (\r\n    <section className=\"preview-info\">\r\n      <h2>{props.artworkName}</h2>\r\n      {props.artworkType && <span>{props.artworkType}</span>}\r\n      <span>\r\n        Artist: {props.artistName ? props.artistName : 'Unknown artist'}\r\n      </span>\r\n      {props.artworkOrigin && (\r\n        <span>Place of origin: {props.artworkOrigin}</span>\r\n      )}\r\n      <span>{props.artworkDate}</span>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ArtworkPreviewInfo;\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FC, MouseEvent, Dispatch, SetStateAction } from 'react';\r\n\r\ninterface ListProps {\r\n  images: string[];\r\n  setIndex: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst ImageViewerList: FC<ListProps> = (props) => {\r\n  const images = props.images;\r\n\r\n  const handleClick = (e: MouseEvent<HTMLLIElement>, index: number) => {\r\n    props.setIndex(index);\r\n    const eventLi = e.currentTarget;\r\n    const ul = eventLi.closest<HTMLUListElement>('ul');\r\n    if (!ul) return;\r\n    for (let li of ul.children) {\r\n      if (li === eventLi) {\r\n        li.classList.add('active');\r\n      } else {\r\n        li.classList.remove('active');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {images.map((image, index) => (\r\n        <ImageViewerListItem\r\n          key={image}\r\n          image={image}\r\n          index={index}\r\n          handleClick={handleClick}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\ninterface ListItemProps {\r\n  image: string;\r\n  index: number;\r\n  handleClick: (e: MouseEvent<HTMLLIElement>, index: number) => void;\r\n}\r\n\r\nconst ImageViewerListItem: FC<ListItemProps> = (props) => (\r\n  <li\r\n    className={props.index === 0 ? 'active' : ''}\r\n    onClick={(e) => props.handleClick(e, props.index)}\r\n  >\r\n    <img src={props.image} alt=\"artwork\" />\r\n  </li>\r\n);\r\n\r\nexport default ImageViewerList;\r\n","import { FC, useState, useRef, useEffect } from 'react';\r\nimport ImageViewerList from './ImageViewerList';\r\nimport '../css/artwork-page/ImageViewer.css';\r\n\r\ninterface Props {\r\n  images: string[];\r\n}\r\n\r\nconst ImageViewer: FC<Props> = (props) => {\r\n  const [activeIndex, setIndex] = useState(0);\r\n  const images = props.images;\r\n\r\n  const imgRef = useRef<HTMLImageElement>(null);\r\n  useEffect(() => {\r\n    const img = imgRef.current;\r\n    if (img) {\r\n      img.style.transitionDuration = '0s';\r\n      img.style.opacity = '0.4';\r\n      setTimeout(() => {\r\n        img.style.transitionDuration = '0.8s';\r\n        img.style.opacity = '1';\r\n      }, 25);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div id=\"image-viewer\">\r\n      <img ref={imgRef} src={images[activeIndex]} alt=\"big artwork\" />\r\n      <ImageViewerList images={images} setIndex={setIndex} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageViewer;\r\n","export default __webpack_public_path__ + \"static/media/chevronRightWhite.02bcafaa.svg\";","import { FC, ReactNode, useState } from 'react';\nimport arrowSrc from 'assets/icons/white/chevronRightWhite.svg';\nimport './css/Expandable.css';\n\ninterface Props {\n  text: string;\n  children: ReactNode;\n}\n\nconst Expandable: FC<Props> = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div className=\"expandable\">\n      <div className=\"expandable-name\" onClick={() => setIsOpen(!isOpen)}>\n        {props.text}\n        <img src={arrowSrc} alt=\">\" className={isOpen ? 'rotated' : ''} />\n      </div>\n      {isOpen && props.children}\n    </div>\n  );\n};\n\nexport default Expandable;\n","import { FC } from 'react';\nimport '../css/artwork-page/LoadingText.css';\n\nconst LoadingText: FC = () => {\n  const lis = [];\n  for (let i = 0; i < 60; i++) {\n    lis.push(<li key={i} />);\n  }\n\n  return <ul className=\"loading-text\">{lis}</ul>;\n};\n\nexport default LoadingText;\n","import { FC, useLayoutEffect, useRef } from 'react';\nimport {\n  useGetWikiPageByIDQuery,\n  useGetWikiSearchResultsQuery,\n} from 'apis/wikiApi';\nimport LoadingText from './LoadingText';\nimport '../css/artwork-page/WikiInfo.css';\n\ninterface Props {\n  query: string;\n}\n\nconst WikiInfo: FC<Props> = (props) => {\n  const { data: searchValues, isLoading: isSearching } =\n    useGetWikiSearchResultsQuery(props.query);\n\n  const id =\n    searchValues && searchValues.length ? searchValues[0].pageid : null;\n  const { data: page, isLoading: isParsing } = useGetWikiPageByIDQuery(\n    Number(id),\n    {\n      skip: !Boolean(id),\n    }\n  );\n\n  const divRef = useRef<HTMLDivElement>(null);\n  useLayoutEffect(() => {\n    if (divRef.current && page) divRef.current.innerHTML = page.extract;\n  });\n\n  const isLoading = isSearching || isParsing;\n\n  return isLoading ? (\n    <LoadingText />\n  ) : (\n    <div className=\"wiki-info\" ref={divRef} />\n  );\n};\n\nexport default WikiInfo;\n","import { FC } from 'react';\nimport Expandable from '../Expandable';\nimport WikiInfo from './WikiInfo';\n\ninterface Props {\n  text: string;\n  query: string;\n}\n\nconst ExpandableWIkiInfo: FC<Props> = (props) => (\n  <Expandable text={props.text}>\n    <WikiInfo query={props.query} />\n  </Expandable>\n);\n\nexport default ExpandableWIkiInfo;\n","export default __webpack_public_path__ + \"static/media/starYellow.de25db34.svg\";","export default __webpack_public_path__ + \"static/media/starRed.cfbdca58.svg\";","import { FC } from 'react';\r\nimport IconButton from '../components/IconButton';\r\nimport { useAppDispatch, useAppSelector } from '../store';\r\nimport { containsSpecifiedID } from '../actions/getRandomSpecifiedIDs';\r\nimport { addFavourite, removeFavourite } from '../feautres/favouritesSlice';\r\nimport yellowStar from '../assets/icons/yellow/starYellow.svg';\r\nimport redStar from '../assets/icons/red/starRed.svg';\r\nimport { SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\r\nimport { ColorName } from '../types/ColorName';\r\n\r\ninterface Props {\r\n  specID: SpecifiedArtworkID;\r\n}\r\n\r\nconst FavouriteButton: FC<Props> = (props) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const specID = props.specID;\r\n  const favourites = useAppSelector((state) => state.favourites);\r\n  const isInFavourites = containsSpecifiedID(specID, favourites);\r\n  const handleClick = isInFavourites\r\n    ? () => dispatch(removeFavourite(specID))\r\n    : () => dispatch(addFavourite(specID));\r\n\r\n  const src = isInFavourites ? redStar : yellowStar;\r\n  const hoverColor = isInFavourites ? ColorName.Red : ColorName.Yellow;\r\n\r\n  return (\r\n    <IconButton\r\n      size=\"normal\"\r\n      src={src}\r\n      hoverIconColor={ColorName.White}\r\n      hoverBackgroundColor={hoverColor}\r\n      handleClick={handleClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FavouriteButton;\r\n","import { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PageParams } from '../../types/PageParams';\nimport { useGetMetArtworkByIDQuery } from '../../apis/metApi';\nimport PageTitle from '../../components/PageTitle';\nimport ImageViewer from './ImageViewer';\nimport ExpandableWIkiInfo from './ExpandableWIkiInfo';\nimport { PageLoadingSpinner } from '../LoadingSpinner';\nimport ArtworkPreviewInfo from '../../components/preview/ArtworkPreviewInfo';\nimport FavouriteButton from '../../components/FavouriteButton';\nimport specifyID from '../../actions/specifyID';\n\nconst MetArtworkPage: FC = () => {\n  const { id } = useParams<PageParams>();\n  const { data, isLoading } = useGetMetArtworkByIDQuery(Number(id));\n\n  if (isLoading || !data) return <PageLoadingSpinner />;\n  return (\n    <>\n      <PageTitle text={data.title} underlined={true} />\n      <ImageViewer images={[data.primaryImage, ...data.additionalImages]} />\n      <ArtworkPreviewInfo\n        artworkName={data.title}\n        artistName={data.artistDisplayName}\n        artworkDate={data.objectDate}\n        artworkOrigin={data.country}\n      />\n      <FavouriteButton specID={specifyID('met', Number(id))} />\n      <ExpandableWIkiInfo text=\"Artwork wiki\" query={data.title} />\n      {data.artistDisplayName && (\n        <ExpandableWIkiInfo text=\"Artist wiki\" query={data.artistDisplayName} />\n      )}\n    </>\n  );\n};\n\nexport default MetArtworkPage;\n","import { FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport MetArtworkPage from '../components/artwork-page/MetArtworkPage';\r\nimport { PageParams } from '../types/PageParams';\r\nimport './css/ArtworkPage.css';\r\n\r\nconst ArtworkPageProxy: FC = () => {\r\n  const { source } = useParams<PageParams>();\r\n  const pages = {\r\n    met: MetArtworkPage,\r\n  };\r\n\r\n  if (!source) return <p>no such source type</p>;\r\n  const CurrentPage = pages[source];\r\n\r\n  return (\r\n    <div id=\"artwork-page\">\r\n      <CurrentPage />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArtworkPageProxy;\r\n"],"sourceRoot":""}