{"version":3,"sources":["components/preview/ArtworkPreviewInfo.tsx","components/WideIconButton.tsx","assets/icons/white/chevronDownWhite.svg","components/preview/LoadingArtworkPreview.tsx","components/preview/MetArtworkPreview.tsx","components/preview/ArtworkPreviewProxy.tsx","components/preview/ArtworkPreviewsList.tsx","pages/Favourites.tsx"],"names":["ArtworkPreviewInfo","props","className","artworkName","artworkType","artistName","artworkOrigin","artworkDate","WideIconButton","backgroundColor","hoverBackgroundColor","onClick","handleClick","src","alt","LoadingArtworkPreview","MetArtworkPreview","useGetMetArtworkByIDQuery","id","data","isLoading","primaryImageSmall","title","objectName","artistDisplayName","objectDate","country","ArtworkPreviewProxy","CurrentPreview","met","source","navigate","useNavigate","ArtworkPreviewsList","specifiedIDs","map","specID","Favourites","useState","length","setLength","favourites","useAppSelector","state","displaySpecIDs","useMemo","slice","pageType","PageType","arrowSrc","ColorName","Yellow","Red"],"mappings":"2FACA,iBA0BeA,IAhBuB,SAACC,GACrC,OACE,0BAASC,UAAU,eAAnB,UACE,6BAAKD,EAAME,cACVF,EAAMG,aAAe,+BAAOH,EAAMG,cACnC,4CACWH,EAAMI,WAAaJ,EAAMI,WAAa,oBAEhDJ,EAAMK,eACL,qDAAwBL,EAAMK,iBAEhC,+BAAOL,EAAMM,mB,oHCtBnB,sBAoBeC,IATmB,SAACP,GAAD,OAChC,wBACEC,UAAS,8BAAyBD,EAAMQ,gBAA/B,qBAA2DR,EAAMS,sBAC1EC,QAASV,EAAMW,YAFjB,SAIE,qBAAKC,IAAKZ,EAAMY,IAAKC,IAAI,oB,qDChBd,QAA0B,8C,mECe1BC,EAZmB,kBAChC,qBAAIb,UAAU,0BAAd,UACE,qBAAKA,UAAU,0BACf,qBAAIA,UAAU,uBAAd,UACE,uBACA,uBACA,uBACA,8BCmBSc,G,MAlBsB,SAACf,GACpC,MAA4BgB,YAA0BhB,EAAMiB,IAApDC,EAAR,EAAQA,KAER,OAFA,EAAcC,YAEID,EAAa,cAAC,EAAD,IAE7B,qBAAIjB,UAAU,kBAAkBS,QAASV,EAAMW,YAA/C,UACE,qBAAKC,IAAKM,EAAKE,kBAAmBP,IAAI,YACtC,cAACd,EAAA,EAAD,CACEG,YAAagB,EAAKG,MAClBlB,YAAae,EAAKI,WAClBlB,WAAYc,EAAKK,kBACjBjB,YAAaY,EAAKM,WAClBnB,cAAea,EAAKO,e,OCDbC,EAZwB,SAAC1B,GACtC,IAGM2B,EAHW,CACfC,IAAKb,GAEyBf,EAAM6B,QAEhCC,EAAWC,cAGjB,OAAO,cAACJ,EAAD,CAAgBV,GAAIjB,EAAMiB,GAAIN,YAFjB,kBAAMmB,EAAS,MAAD,OAAO9B,EAAM6B,OAAb,YAAuB7B,EAAMiB,S,MCIlDe,IAZwB,SAAChC,GAAD,OACrC,oBAAIiB,GAAG,gBAAP,SACGjB,EAAMiC,aAAaC,KAAI,SAACC,GAAD,OACtB,cAAC,EAAD,CAEElB,GAAIkB,EAAOlB,GACXY,OAAQM,EAAON,QAHjB,UACUM,EAAOlB,IADjB,OACsBkB,EAAON,gB,sJCmBpBO,UAtBQ,WACrB,MAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAaC,aAAe,SAACC,GAAD,OAAWA,EAAMF,cAC7CG,EAAiBC,mBACrB,kBAAMJ,EAAWK,MAAM,EAAGP,KAC1B,CAACE,EAAYF,IAGf,OACE,sBAAKrB,GAAG,aAAR,UACE,cAAC,IAAD,CAAiB6B,SAAUC,IAASX,aACpC,cAAC,IAAD,CAAqBH,aAAcU,IACnC,cAAC,IAAD,CACE/B,IAAKoC,IACLxC,gBAAiByC,IAAUC,OAC3BzC,qBAAsBwC,IAAUE,IAChCxC,YAAa,kBAAM4B,EAAUD,EAAS","file":"static/js/4.784e7410.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport '../css/preview/ArtworkPreviewInfo.css';\r\n\r\ninterface Props {\r\n  artworkName: string;\r\n  artworkType?: string;\r\n  artistName: string;\r\n  artworkDate: string;\r\n  artworkOrigin: string;\r\n}\r\n\r\nconst ArtworkPreviewInfo: FC<Props> = (props) => {\r\n  return (\r\n    <section className=\"preview-info\">\r\n      <h2>{props.artworkName}</h2>\r\n      {props.artworkType && <span>{props.artworkType}</span>}\r\n      <span>\r\n        Artist: {props.artistName ? props.artistName : 'Unknown artist'}\r\n      </span>\r\n      {props.artworkOrigin && (\r\n        <span>Place of origin: {props.artworkOrigin}</span>\r\n      )}\r\n      <span>{props.artworkDate}</span>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ArtworkPreviewInfo;\r\n","import React, { FC } from 'react';\r\nimport { ColorName } from '../types/ColorName';\r\nimport './css/WideIconButton.css';\r\n\r\ninterface Props {\r\n  src: string;\r\n  backgroundColor: ColorName;\r\n  hoverBackgroundColor: ColorName;\r\n  handleClick: () => void;\r\n}\r\n\r\nconst WideIconButton: FC<Props> = (props) => (\r\n  <button\r\n    className={`wide-icon-button bg-${props.backgroundColor} bg-hover-${props.hoverBackgroundColor}`}\r\n    onClick={props.handleClick}\r\n  >\r\n    <img src={props.src} alt=\"icon-button\" />\r\n  </button>\r\n);\r\n\r\nexport default WideIconButton;\r\n","export default __webpack_public_path__ + \"static/media/chevronDownWhite.46f89c78.svg\";","import { FC } from 'react';\r\nimport '../css/preview/LoadingArtworkPreview.css';\r\n\r\nconst LoadingArtworkPreview: FC = () => (\r\n  <li className=\"loading-artwork-preview\">\r\n    <div className=\"loading-preview-image\" />\r\n    <ul className=\"loading-preview-info\">\r\n      <li />\r\n      <li />\r\n      <li />\r\n      <li />\r\n    </ul>\r\n  </li>\r\n);\r\n\r\nexport default LoadingArtworkPreview;\r\n","import { FC } from 'react';\r\nimport { useGetMetArtworkByIDQuery } from '../../apis/metApi';\r\nimport ArtworkPreviewInfo from '../../components/preview/ArtworkPreviewInfo';\r\nimport LoadingArtworkPreview from './LoadingArtworkPreview';\r\nimport '../css/preview/ArtworkPreview.css';\r\n\r\ninterface Props {\r\n  id: number;\r\n  handleClick: () => void;\r\n}\r\n\r\nconst MetArtworkPreview: FC<Props> = (props) => {\r\n  const { data, isLoading } = useGetMetArtworkByIDQuery(props.id);\r\n\r\n  if (isLoading || !data) return <LoadingArtworkPreview />;\r\n  return (\r\n    <li className=\"artwork-preview\" onClick={props.handleClick}>\r\n      <img src={data.primaryImageSmall} alt=\"artwork\" />\r\n      <ArtworkPreviewInfo\r\n        artworkName={data.title}\r\n        artworkType={data.objectName}\r\n        artistName={data.artistDisplayName}\r\n        artworkDate={data.objectDate}\r\n        artworkOrigin={data.country}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default MetArtworkPreview;\r\n","import { FC } from 'react';\r\nimport MetArtworkPreview from '../../components/preview/MetArtworkPreview';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { DataSource } from '../../types/SpecifiedArtworkID';\r\n\r\ninterface Props {\r\n  source: DataSource;\r\n  id: number;\r\n}\r\n\r\nconst ArtworkPreviewProxy: FC<Props> = (props) => {\r\n  const previews = {\r\n    met: MetArtworkPreview,\r\n  };\r\n  const CurrentPreview = previews[props.source];\r\n\r\n  const navigate = useNavigate();\r\n  const handleClick = () => navigate(`../${props.source}/${props.id}`);\r\n\r\n  return <CurrentPreview id={props.id} handleClick={handleClick} />;\r\n};\r\n\r\nexport default ArtworkPreviewProxy;\r\n","import { FC } from 'react';\r\nimport { SpecifiedArtworkID } from '../../types/SpecifiedArtworkID';\r\nimport ArtworkPreviewProxy from '../../components/preview/ArtworkPreviewProxy';\r\nimport '../css/preview/ArtworkPreviewsList.css';\r\n\r\ninterface Props {\r\n  specifiedIDs: SpecifiedArtworkID[];\r\n}\r\n\r\nconst ArtworkPreviewsList: FC<Props> = (props) => (\r\n  <ul id=\"previews-list\">\r\n    {props.specifiedIDs.map((specID) => (\r\n      <ArtworkPreviewProxy\r\n        key={`${specID.id}${specID.source}`}\r\n        id={specID.id}\r\n        source={specID.source}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default ArtworkPreviewsList;\r\n","import { FC, useMemo, useState } from 'react';\r\nimport PageDescription from '../components/PageDescription';\r\nimport ArtworkPreviewsList from '../components/preview/ArtworkPreviewsList';\r\nimport WideIconButton from '../components/WideIconButton';\r\nimport arrowSrc from '../assets/icons/white/chevronDownWhite.svg';\r\nimport { PageType } from '../types/PageType';\r\nimport { ColorName } from '../types/ColorName';\r\nimport { useAppSelector } from '../store';\r\nimport './css/Favourites.css';\r\n\r\nconst Favourites: FC = () => {\r\n  const [length, setLength] = useState(5);\r\n  const favourites = useAppSelector((state) => state.favourites);\r\n  const displaySpecIDs = useMemo(\r\n    () => favourites.slice(0, length),\r\n    [favourites, length]\r\n  );\r\n\r\n  return (\r\n    <div id=\"favourites\">\r\n      <PageDescription pageType={PageType.Favourites} />\r\n      <ArtworkPreviewsList specifiedIDs={displaySpecIDs} />\r\n      <WideIconButton\r\n        src={arrowSrc}\r\n        backgroundColor={ColorName.Yellow}\r\n        hoverBackgroundColor={ColorName.Red}\r\n        handleClick={() => setLength(length + 5)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Favourites;\r\n"],"sourceRoot":""}