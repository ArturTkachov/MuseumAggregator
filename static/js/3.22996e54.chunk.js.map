{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/preview/ArtworkPreviewInfo.tsx","components/preview/MetArtworkPreview.tsx","components/preview/ArtworkPreviewProxy.tsx","components/preview/ArtworkPreviewsList.tsx","hooks/useMetCollectionIDs.ts","actions/getRandomNumberInRange.ts","actions/getRandomArrayElement.ts","actions/specifyID.ts","actions/getRandomSpecifiedIDs.ts","hooks/useRandomSpecifiedCollectionIDs.ts","pages/CollectionPage.tsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ArtworkPreviewInfo","props","className","artworkName","artworkType","artistName","artworkOrigin","artworkDate","MetArtworkPreview","useGetMetArtworkByIDQuery","id","data","isLoading","onClick","handleClick","src","primaryImageSmall","alt","title","objectName","artistDisplayName","objectDate","country","ArtworkPreviewProxy","CurrentPreview","met","source","navigate","useNavigate","ArtworkPreviewsList","specifiedIDs","map","specID","useMetCollectionIDs","collection","depID","CollectionType","Antiquity","Asia","MiddleAges","useGetMetDepartmentArtworksIDsQuery","ids","getRandomNumberInRange","min","max","Math","floor","random","getRandomArrayElement","length","specifyID","containsSpecifiedID","i","getRandomSpecifiedIDs","amount","usedElements","elements","iterations","maxIterations","push","useRandomSpecifiedCollectionIDs","usedIDs","metIDs","specMetIDs","CollectionPage","useState","setLength","idsRef","useRef","current"],"mappings":"qJAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,gJIsB/EC,EAhBuB,SAACC,GACrC,OACE,0BAASC,UAAU,eAAnB,UACE,6BAAKD,EAAME,cACVF,EAAMG,aAAe,+BAAOH,EAAMG,cACnC,4CACWH,EAAMI,WAAaJ,EAAMI,WAAa,oBAEhDJ,EAAMK,eACL,qDAAwBL,EAAMK,iBAEhC,+BAAOL,EAAMM,kBCMJC,G,MAlBsB,SAACP,GACpC,MAA4BQ,YAA0BR,EAAMS,IAApDC,EAAR,EAAQA,KAER,OAFA,EAAcC,YAEID,EAAa,oDAE7B,qBAAIT,UAAU,kBAAkBW,QAASZ,EAAMa,YAA/C,UACE,qBAAKC,IAAKJ,EAAKK,kBAAmBC,IAAI,YACtC,cAAC,EAAD,CACEd,YAAaQ,EAAKO,MAClBd,YAAaO,EAAKQ,WAClBd,WAAYM,EAAKS,kBACjBb,YAAaI,EAAKU,WAClBf,cAAeK,EAAKW,e,OCAbC,EAZwB,SAACtB,GACtC,IAGMuB,EAHW,CACfC,IAAKjB,GAEyBP,EAAMyB,QAEhCC,EAAWC,cAGjB,OAAO,cAACJ,EAAD,CAAgBd,GAAIT,EAAMS,GAAII,YAFjB,kBAAMa,EAAS,MAAD,OAAO1B,EAAMyB,OAAb,YAAuBzB,EAAMS,SCIlDmB,G,MAZwB,SAAC5B,GAAD,OACrC,oBAAIS,GAAG,gBAAP,SACGT,EAAM6B,aAAaC,KAAI,SAACC,GAAD,OACtB,cAAC,EAAD,CAEEtB,GAAIsB,EAAOtB,GACXgB,OAAQM,EAAON,QAHjB,UACUM,EAAOtB,IADjB,OACsBsB,EAAON,gB,wBCGpBO,EAba,SAACC,GAAiD,IAAD,EAMrEC,GALgB,mBACnBC,IAAeC,UAAY,IADR,cAEnBD,IAAeE,KAAO,GAFH,cAGnBF,IAAeG,WAAa,IAHT,GAKSL,GAC/B,EAAiCM,YAAoCL,GAAvDM,EAAd,EAAQ9B,KAER,OAFA,EAAmBC,YAED6B,EAAY,KACvBA,GCVMC,EAHgB,SAACC,EAAaC,GAAd,OAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,ICI5BK,EAHe,SAAI3D,GAAJ,OAC5BA,EAAIqD,EAAuB,EAAGrD,EAAI4D,UCIrBC,EALG,SAACxB,EAAoBhB,GAArB,MAAyD,CACzEgB,SACAhB,OCmBIyC,EAAsB,SAC1BnB,EACA3C,GAEA,IAAK,IAAI+D,EAAI,EAAGA,EAAI/D,EAAI4D,OAAQG,IAC9B,GAAIpB,EAAON,SAAWrC,EAAI+D,GAAG1B,QAAUM,EAAOtB,KAAOrB,EAAI+D,GAAG1C,GAAI,OAAO,EACzE,OAAO,GAGM2C,EA5Be,SAC5BC,EACA5B,EACArC,EACAkE,GAKA,IAHA,IAAMC,EAAiC,GACnCC,EAAa,EACXC,EAAgBJ,EAAS,EACxBE,EAASP,OAASK,GACnBG,IAAeC,GADY,CAE/BD,IACA,IAAM/C,EAAKsC,EAAsB3D,GAC3B2C,EAASkB,EAAUxB,EAAQhB,GAC5ByC,EAAoBnB,EAAQuB,IAAeC,EAASG,KAAK3B,GAEhE,OAAOwB,GCDMI,EAdyB,SACtCN,EACApB,EACA2B,GAEA,IAAMC,EAAS7B,EAAoBC,GAC/B6B,EAAmC,GAKvC,OAJID,IACFC,EAAaV,EAAsBC,EAAQ,MAAOQ,EAAQD,GAC1DE,EAAU,sBAAOF,GAAP,YAAmBE,KAExBA,GCYMC,UAlBmB,SAAC/D,GACjC,MAA4BgE,mBAAS,GAArC,mBAAOhB,EAAP,KAAeiB,EAAf,KACMC,EAASC,iBAA6B,IAO5C,OANAD,EAAOE,QAAUT,EACfX,EAASkB,EAAOE,QAAQpB,OACxBhD,EAAMiC,WACNiC,EAAOE,SAGJF,EAAOE,QAAQpB,OAElB,qCACE,cAAC,EAAD,CAAqBnB,aAAcqC,EAAOE,UAC1C,wBAAQxD,QAAS,kBAAMqD,EAAUjB,EAAS,IAA1C,0BAJ+B","file":"static/js/3.22996e54.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FC } from 'react';\nimport '../css/preview/ArtworkPreviewInfo.css';\n\ninterface Props {\n  artworkName: string;\n  artworkType?: string;\n  artistName: string;\n  artworkDate: string;\n  artworkOrigin: string;\n}\n\nconst ArtworkPreviewInfo: FC<Props> = (props) => {\n  return (\n    <section className=\"preview-info\">\n      <h2>{props.artworkName}</h2>\n      {props.artworkType && <span>{props.artworkType}</span>}\n      <span>\n        Artist: {props.artistName ? props.artistName : 'Unknown artist'}\n      </span>\n      {props.artworkOrigin && (\n        <span>Place of origin: {props.artworkOrigin}</span>\n      )}\n      <span>{props.artworkDate}</span>\n    </section>\n  );\n};\n\nexport default ArtworkPreviewInfo;\n","import { FC } from 'react';\nimport { useGetMetArtworkByIDQuery } from '../../apis/metApi';\nimport ArtworkPreviewInfo from '../../components/preview/ArtworkPreviewInfo';\nimport '../css/preview/ArtworkPreview.css';\n\ninterface Props {\n  id: number;\n  handleClick: () => void;\n}\n\nconst MetArtworkPreview: FC<Props> = (props) => {\n  const { data, isLoading } = useGetMetArtworkByIDQuery(props.id);\n\n  if (isLoading || !data) return <div>Loadig artwork...</div>;\n  return (\n    <li className=\"artwork-preview\" onClick={props.handleClick}>\n      <img src={data.primaryImageSmall} alt=\"artwork\" />\n      <ArtworkPreviewInfo\n        artworkName={data.title}\n        artworkType={data.objectName}\n        artistName={data.artistDisplayName}\n        artworkDate={data.objectDate}\n        artworkOrigin={data.country}\n      />\n    </li>\n  );\n};\n\nexport default MetArtworkPreview;\n","import { FC } from 'react';\nimport MetArtworkPreview from '../../components/preview/MetArtworkPreview';\nimport { useNavigate } from 'react-router-dom';\nimport { DataSource } from '../../types/SpecifiedArtworkID';\n\ninterface Props {\n  source: DataSource;\n  id: number;\n}\n\nconst ArtworkPreviewProxy: FC<Props> = (props) => {\n  const previews = {\n    met: MetArtworkPreview,\n  };\n  const CurrentPreview = previews[props.source];\n\n  const navigate = useNavigate();\n  const handleClick = () => navigate(`../${props.source}/${props.id}`);\n\n  return <CurrentPreview id={props.id} handleClick={handleClick} />;\n};\n\nexport default ArtworkPreviewProxy;\n","import { FC } from 'react';\nimport { SpecifiedArtworkID } from '../../types/SpecifiedArtworkID';\nimport ArtworkPreviewProxy from '../../components/preview/ArtworkPreviewProxy';\nimport '../css/preview/ArtworkPreviewsList.css';\n\ninterface Props {\n  specifiedIDs: SpecifiedArtworkID[];\n}\n\nconst ArtworkPreviewsList: FC<Props> = (props) => (\n  <ul id=\"previews-list\">\n    {props.specifiedIDs.map((specID) => (\n      <ArtworkPreviewProxy\n        key={`${specID.id}${specID.source}`}\n        id={specID.id}\n        source={specID.source}\n      />\n    ))}\n  </ul>\n);\n\nexport default ArtworkPreviewsList;\n","import { useGetMetDepartmentArtworksIDsQuery } from '../apis/metApi';\r\nimport { CollectionType } from '../types/CollectionType';\r\n\r\nconst useMetCollectionIDs = (collection: CollectionType): number[] | null => {\r\n  const metDepartmentIDs = {\r\n    [CollectionType.Antiquity]: 13,\r\n    [CollectionType.Asia]: 6,\r\n    [CollectionType.MiddleAges]: 17,\r\n  };\r\n  const depID = metDepartmentIDs[collection];\r\n  const { data: ids, isLoading } = useGetMetDepartmentArtworksIDsQuery(depID);\r\n\r\n  if (isLoading || !ids) return null;\r\n  return ids;\r\n};\r\n\r\nexport default useMetCollectionIDs;\r\n","const getRandomNumberInRange = (min: number, max: number): number =>\r\n  Math.floor(Math.random() * (max - min) + min);\r\n\r\nexport default getRandomNumberInRange;\r\n","import getRandomNumberInRange from './getRandomNumberInRange';\n\nconst getRandomArrayElement = <T>(arr: T[]): T =>\n  arr[getRandomNumberInRange(0, arr.length)];\n\nexport default getRandomArrayElement;\n","import { DataSource, SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\n\nconst specifyID = (source: DataSource, id: number): SpecifiedArtworkID => ({\n  source,\n  id,\n});\n\nexport default specifyID;\n","import getRandomArrayElement from './getRandomArrayElement';\nimport specifyID from './specifyID';\nimport { DataSource, SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\n\nconst getRandomSpecifiedIDs = (\n  amount: number,\n  source: DataSource,\n  arr: number[],\n  usedElements: SpecifiedArtworkID[]\n): SpecifiedArtworkID[] => {\n  const elements: SpecifiedArtworkID[] = [];\n  let iterations = 0;\n  const maxIterations = amount + 5;\n  while (elements.length < amount) {\n    if (iterations === maxIterations) break;\n    iterations++;\n    const id = getRandomArrayElement(arr);\n    const specID = specifyID(source, id);\n    if (!containsSpecifiedID(specID, usedElements)) elements.push(specID);\n  }\n  return elements;\n};\n\nconst containsSpecifiedID = (\n  specID: SpecifiedArtworkID,\n  arr: SpecifiedArtworkID[]\n): boolean => {\n  for (let i = 0; i < arr.length; i++)\n    if (specID.source === arr[i].source && specID.id === arr[i].id) return true;\n  return false;\n};\n\nexport default getRandomSpecifiedIDs;\n","import useMetCollectionIDs from './useMetCollectionIDs';\nimport { CollectionType } from '../types/CollectionType';\nimport { SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\nimport getRandomSpecifiedIDs from '../actions/getRandomSpecifiedIDs';\n\nconst useRandomSpecifiedCollectionIDs = (\n  amount: number,\n  collection: CollectionType,\n  usedIDs: SpecifiedArtworkID[]\n): SpecifiedArtworkID[] => {\n  const metIDs = useMetCollectionIDs(collection);\n  let specMetIDs: SpecifiedArtworkID[] = [];\n  if (metIDs) {\n    specMetIDs = getRandomSpecifiedIDs(amount, 'met', metIDs, usedIDs);\n    specMetIDs = [...usedIDs, ...specMetIDs];\n  }\n  return specMetIDs;\n};\n\nexport default useRandomSpecifiedCollectionIDs;\n","import { CollectionType } from '../types/CollectionType';\nimport { FC, useRef, useState } from 'react';\nimport ArtworkPreviewsList from '../components/preview/ArtworkPreviewsList';\nimport { SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\nimport useRandomSpecifiedCollectionIDs from '../hooks/useRandomSpecifiedCollectionIDs';\n\ninterface Props {\n  collection: CollectionType;\n}\n\nconst CollectionPage: FC<Props> = (props) => {\n  const [length, setLength] = useState(5);\n  const idsRef = useRef<SpecifiedArtworkID[]>([]);\n  idsRef.current = useRandomSpecifiedCollectionIDs(\n    length - idsRef.current.length,\n    props.collection,\n    idsRef.current\n  );\n\n  if (!idsRef.current.length) return <div>Loading...</div>;\n  return (\n    <>\n      <ArtworkPreviewsList specifiedIDs={idsRef.current} />\n      <button onClick={() => setLength(length + 5)}>load more</button>\n    </>\n  );\n};\n\nexport default CollectionPage;\n"],"sourceRoot":""}