{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/artwork-page/ImageViewerList.tsx","components/artwork-page/ImageViewer.tsx","components/artwork-page/MetArtworkPage.tsx","pages/ArtworkPageProxy.tsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ImageViewerListItem","props","className","index","onClick","e","handleClick","src","image","alt","ImageViewerList","images","setIndex","eventLi","currentTarget","ul","closest","children","li","classList","add","remove","map","ImageViewer","useState","activeIndex","imgRef","useRef","useEffect","img","current","style","transitionDuration","opacity","setTimeout","id","ref","MetArtworkPage","useParams","useGetMetArtworkByIDQuery","Number","data","isLoading","primaryImage","additionalImages","ArtworkPageProxy","source","pages","met","CurrentPage"],"mappings":"qJAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,qHIuCxFC,EAAyC,SAACC,GAAD,OAC7C,oBACEC,UAA2B,IAAhBD,EAAME,MAAc,SAAW,GAC1CC,QAAS,SAACC,GAAD,OAAOJ,EAAMK,YAAYD,EAAGJ,EAAME,QAF7C,SAIE,qBAAKI,IAAKN,EAAMO,MAAOC,IAAI,eAIhBC,EA9CwB,SAACT,GACtC,IAAMU,EAASV,EAAMU,OAEfL,EAAc,SAACD,EAA8BF,GACjDF,EAAMW,SAAST,GACf,IAAMU,EAAUR,EAAES,cACZC,EAAKF,EAAQG,QAA0B,MAC7C,GAAKD,EAAL,CAJmE,oBAKpDA,EAAGE,UALiD,IAKnE,2BAA4B,CAAC,IAApBC,EAAmB,QACtBA,IAAOL,EACTK,EAAGC,UAAUC,IAAI,UAEjBF,EAAGC,UAAUE,OAAO,WAT2C,iCAcrE,OACE,6BACGV,EAAOW,KAAI,SAACd,EAAOL,GAAR,OACV,cAAC,EAAD,CAEEK,MAAOA,EACPL,MAAOA,EACPG,YAAaA,GAHRE,SCKAe,G,MAzBgB,SAACtB,GAC9B,MAAgCuB,mBAAS,GAAzC,mBAAOC,EAAP,KAAoBb,EAApB,KACMD,EAASV,EAAMU,OAEfe,EAASC,iBAAyB,MAaxC,OAZAC,qBAAU,WACR,IAAMC,EAAMH,EAAOI,QACfD,IACFA,EAAIE,MAAMC,mBAAqB,KAC/BH,EAAIE,MAAME,QAAU,MACpBC,YAAW,WACTL,EAAIE,MAAMC,mBAAqB,OAC/BH,EAAIE,MAAME,QAAU,MACnB,QAKL,sBAAKE,GAAG,eAAR,UACE,qBAAKC,IAAKV,EAAQnB,IAAKI,EAAOc,GAAchB,IAAI,gBAChD,cAAC,EAAD,CAAiBE,OAAQA,EAAQC,SAAUA,SCdlCyB,EARY,WACzB,IAAQF,EAAOG,cAAPH,GACR,EAA4BI,YAA0BC,OAAOL,IAArDM,EAAR,EAAQA,KAER,OAFA,EAAcC,YAEID,EAAa,kDACxB,cAAC,EAAD,CAAa9B,OAAM,CAAG8B,EAAKE,cAAR,mBAAyBF,EAAKG,sBCM3CC,UAZc,WAC3B,IAAQC,EAAWR,cAAXQ,OACFC,EAAQ,CACZC,IAAKX,GAGP,IAAKS,EAAQ,OAAO,oDACpB,IAAMG,EAAcF,EAAMD,GAE1B,OAAO,cAACG,EAAD","file":"static/js/5.03978332.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FC, MouseEvent, Dispatch, SetStateAction } from 'react';\r\n\r\ninterface ListProps {\r\n  images: string[];\r\n  setIndex: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst ImageViewerList: FC<ListProps> = (props) => {\r\n  const images = props.images;\r\n\r\n  const handleClick = (e: MouseEvent<HTMLLIElement>, index: number) => {\r\n    props.setIndex(index);\r\n    const eventLi = e.currentTarget;\r\n    const ul = eventLi.closest<HTMLUListElement>('ul');\r\n    if (!ul) return;\r\n    for (let li of ul.children) {\r\n      if (li === eventLi) {\r\n        li.classList.add('active');\r\n      } else {\r\n        li.classList.remove('active');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {images.map((image, index) => (\r\n        <ImageViewerListItem\r\n          key={image}\r\n          image={image}\r\n          index={index}\r\n          handleClick={handleClick}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\ninterface ListItemProps {\r\n  image: string;\r\n  index: number;\r\n  handleClick: (e: MouseEvent<HTMLLIElement>, index: number) => void;\r\n}\r\n\r\nconst ImageViewerListItem: FC<ListItemProps> = (props) => (\r\n  <li\r\n    className={props.index === 0 ? 'active' : ''}\r\n    onClick={(e) => props.handleClick(e, props.index)}\r\n  >\r\n    <img src={props.image} alt=\"artwork\" />\r\n  </li>\r\n);\r\n\r\nexport default ImageViewerList;\r\n","import { FC, useState, useRef, useEffect } from 'react';\r\nimport ImageViewerList from './ImageViewerList';\r\nimport '../css/artwork-page/ImageViewer.css';\r\n\r\ninterface Props {\r\n  images: string[];\r\n}\r\n\r\nconst ImageViewer: FC<Props> = (props) => {\r\n  const [activeIndex, setIndex] = useState(0);\r\n  const images = props.images;\r\n\r\n  const imgRef = useRef<HTMLImageElement>(null);\r\n  useEffect(() => {\r\n    const img = imgRef.current;\r\n    if (img) {\r\n      img.style.transitionDuration = '0s';\r\n      img.style.opacity = '0.4';\r\n      setTimeout(() => {\r\n        img.style.transitionDuration = '0.8s';\r\n        img.style.opacity = '1';\r\n      }, 25);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div id=\"image-viewer\">\r\n      <img ref={imgRef} src={images[activeIndex]} alt=\"big artwork\" />\r\n      <ImageViewerList images={images} setIndex={setIndex} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageViewer;\r\n","import { FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { PageParams } from '../../types/PageParams';\r\nimport { useGetMetArtworkByIDQuery } from '../../apis/metApi';\r\nimport ImageViewer from './ImageViewer';\r\n\r\nconst MetArtworkPage: FC = () => {\r\n  const { id } = useParams<PageParams>();\r\n  const { data, isLoading } = useGetMetArtworkByIDQuery(Number(id));\r\n\r\n  if (isLoading || !data) return <div>Loading page...</div>;\r\n  return <ImageViewer images={[data.primaryImage, ...data.additionalImages]} />;\r\n};\r\n\r\nexport default MetArtworkPage;\r\n","import { FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport MetArtworkPage from '../components/artwork-page/MetArtworkPage';\r\nimport { PageParams } from '../types/PageParams';\r\n\r\nconst ArtworkPageProxy: FC = () => {\r\n  const { source } = useParams<PageParams>();\r\n  const pages = {\r\n    met: MetArtworkPage,\r\n  };\r\n\r\n  if (!source) return <p>no such source type</p>;\r\n  const CurrentPage = pages[source];\r\n\r\n  return <CurrentPage />;\r\n};\r\n\r\nexport default ArtworkPageProxy;\r\n"],"sourceRoot":""}