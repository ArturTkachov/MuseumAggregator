{"version":3,"sources":["components/LoadingSpinner.tsx","types/ColorName.ts","apis/metApi.ts","components/IconButton.tsx","apis/wikiApi.ts","types/CollectionType.ts","actions/getRandomSpecifiedIDs.ts","actions/specifyID.ts","components/PageTitle.tsx","store.ts","components/PageDescription.tsx","types/PageType.ts","feautres/favouritesSlice.ts","actions/getRandomNumberInRange.ts","actions/getRandomArrayElement.ts","components/SearchBar.tsx","components/header/MainSearchBar.tsx","assets/icons/red/menuRed.svg","components/header/Menu.js","assets/icons/white/xWhite.svg","components/header/MenuContents.js","components/header/MenuButton.js","App.js","reportWebVitals.js","components/RedButton.tsx","components/home/TryNowButton.tsx","assets/svg/ManWithLaptop.svg","pages/Home.tsx","index.js"],"names":["LoadingSpinner","className","PageLoadingSpinner","id","ColorName","extractIDsArray","responseData","objectIDs","metApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getMetArtworksIDsBySearch","query","arg","encodeURI","transformResponse","keepUnusedDataFor","getAllMetArtworksIDs","getMetDepartmentArtworksIDs","departmentID","getMetArtworkByID","artworkID","useGetAllMetArtworksIDsQuery","useGetMetDepartmentArtworksIDsQuery","useGetMetArtworkByIDQuery","useGetMetArtworksIDsBySearchQuery","IconButton","React","memo","props","iconColor","hoverIconColor","bgColor","hoverBackgroundColor","iconClass","bgClass","size","onClick","handleClick","src","alt","wikiApi","getWikiSearchResults","search","getWikiPageByID","meta","pages","useGetWikiSearchResultsQuery","useGetWikiPageByIDQuery","CollectionType","specifiedIDsAreEqual","a","b","source","containsSpecifiedID","specID","arr","i","length","findSpecifiedID","getRandomSpecifiedIDs","amount","usedElements","elements","iterations","maxIterations","getRandomArrayElement","specifyID","push","PageTitle","underlined","text","children","store","configureStore","reducer","favouritesReducer","middleware","getDefaultMiddleware","concat","useAppSelector","useSelector","useAppDispatch","useDispatch","PageDescription","pageInfos","home","title","description","collections","random","favourites","attribution","heading","pageType","PageType","localStorage","getItem","initialState","JSON","parse","favouritesSlice","createSlice","name","reducers","addFavourite","state","action","payload","setItem","stringify","removeFavourite","index","splice","actions","getRandomNumberInRange","min","max","Math","floor","SearchBar","formClass","onSubmit","handleSubmit","type","value","onChange","handleChange","MainSearchBar","useState","setValue","navigate","useNavigate","e","target","preventDefault","menuRoot","document","getElementById","Menu","isOpen","menuRef","useRef","menu","current","useEffect","handleOutsideClick","contains","window","addEventListener","removeEventListener","isInitialMount","style","opacity","transform","ReactDOM","createPortal","ref","MenuCloseButton","iconSrc","Yellow","MenuItem","to","toLowerCase","MenuList","menuItems","map","MenuButton","bind","this","setState","White","Red","PureComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RedButton","TryNowButton","Home","Collections","lazy","CollectionPage","Favourites","ArtworkPageProxy","SearchPage","RandomArtworkPage","render","StrictMode","path","element","Suspense","fallback","collection","Antiquity","Asia","MiddleAges"],"mappings":"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","file":"static/js/main.92932eac.chunk.js","sourcesContent":["import { FC } from 'react';\nimport './css/LoadingSpinner.css';\n\nexport const LoadingSpinner: FC = () => (\n  <div className=\"loading-spinner\">\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport const PageLoadingSpinner: FC = () => (\n  <div id=\"page-loading-spinner\">\n    <LoadingSpinner />\n  </div>\n);\n","export enum ColorName{\r\n  White = \"white\",\r\n  Yellow = \"yellow\",\r\n  Red = \"red\",\r\n  DarkRed = \"dark-red\"\r\n}\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/dist/query/react';\nimport { MetArtworksIDs } from '../types/MetArtworksIDs';\nimport { MetArtwork } from '../types/MetArtwork';\n\nconst extractIDsArray = (responseData: MetArtworksIDs): number[] =>\n  responseData.objectIDs;\n\nexport const metApi = createApi({\n  reducerPath: 'metApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://collectionapi.metmuseum.org/public/collection/v1/',\n  }),\n  endpoints: (builder) => ({\n    getMetArtworksIDsBySearch: builder.query<number[], string>({\n      query: (arg) => `search?hasImages=true&q=${encodeURI(arg)}`,\n      transformResponse: extractIDsArray,\n      keepUnusedDataFor: 80,\n    }),\n    getAllMetArtworksIDs: builder.query<number[], void>({\n      query: () => 'search?hasImages=true&q=\"\"',\n      transformResponse: extractIDsArray,\n      keepUnusedDataFor: 600,\n    }),\n    getMetDepartmentArtworksIDs: builder.query<number[], number>({\n      query: (departmentID) =>\n        `search?hasImages=true&departmentId=${departmentID}&q=\"\"`,\n      transformResponse: extractIDsArray,\n      keepUnusedDataFor: 300,\n    }),\n    getMetArtworkByID: builder.query<MetArtwork, number>({\n      query: (artworkID) => `objects/${artworkID}`,\n    }),\n  }),\n});\n\nexport const {\n  useGetAllMetArtworksIDsQuery,\n  useGetMetDepartmentArtworksIDsQuery,\n  useGetMetArtworkByIDQuery,\n  useGetMetArtworksIDsBySearchQuery,\n} = metApi;\n","import React from 'react';\r\nimport { ColorName } from '../types/ColorName';\r\nimport './css/IconButton.css';\r\n\r\ninterface Props{\r\n  size: \"small\" | \"normal\" | \"big\",\r\n  src: string,\r\n  hoverIconColor?: ColorName,\r\n  hoverBackgroundColor?: ColorName,\r\n  handleClick: () => void;\r\n}\r\n\r\nconst IconButton = React.memo<Props>((props) => {\r\n  const iconColor = props.hoverIconColor;\r\n  const bgColor = props.hoverBackgroundColor;\r\n\r\n  const iconClass = (iconColor) ? `icon-${iconColor}` : \"\";\r\n  const bgClass = (bgColor) ? `bg-${bgColor}` : \"\";\r\n  const className = `icon-button ${props.size} ${iconClass} ${bgClass}`;\r\n\r\n  return (\r\n    <button className={className}  onClick={props.handleClick}>\r\n      <img src={props.src} alt=\"icon-button\"/>\r\n    </button>\r\n  );\r\n});\r\n\r\nexport default IconButton;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/dist/query/react';\r\nimport {\r\n  WikiSearchItem,\r\n  WikiSearchResponse,\r\n} from '../types/WikiSearchResponse';\r\nimport { WikiPageResponse, WikiPage } from '../types/WikiPageResponse';\r\n\r\nexport const wikiApi = createApi({\r\n  reducerPath: 'wikiApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://en.wikipedia.org/w/',\r\n  }),\r\n  endpoints: (builder) => ({\r\n    getWikiSearchResults: builder.query<WikiSearchItem[], string>({\r\n      query: (arg) =>\r\n        `api.php?action=query&list=search&srsearch=${encodeURI(\r\n          arg\r\n        )}&origin=*&utf8=&format=json`,\r\n      transformResponse: (responseData: WikiSearchResponse) =>\r\n        responseData.query.search,\r\n    }),\r\n    getWikiPageByID: builder.query<WikiPage, number>({\r\n      query: (arg) =>\r\n        `api.php?action=query&prop=extracts&exlimit=3&pageids=${arg}&origin=*&format=json`,\r\n      transformResponse: (responseData: WikiPageResponse, meta, arg) =>\r\n        responseData.query.pages[arg],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetWikiSearchResultsQuery, useGetWikiPageByIDQuery } =\r\n  wikiApi;\r\n","export enum CollectionType {\r\n  Antiquity = \"antiquity\",\r\n  Asia = \"asia\",\r\n  MiddleAges = \"middle ages\"\r\n}\r\n","import getRandomArrayElement from './getRandomArrayElement';\r\nimport specifyID from './specifyID';\r\nimport { DataSource, SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\r\n\r\nconst getRandomSpecifiedIDs = (\r\n  amount: number,\r\n  source: DataSource,\r\n  arr: number[],\r\n  usedElements: SpecifiedArtworkID[]\r\n): SpecifiedArtworkID[] => {\r\n  const elements: SpecifiedArtworkID[] = [];\r\n  let iterations = 0;\r\n  const maxIterations = amount + 5;\r\n  while (elements.length < amount) {\r\n    if (iterations === maxIterations) break;\r\n    iterations++;\r\n    const id = getRandomArrayElement(arr);\r\n    const specID = specifyID(source, id);\r\n    if (!containsSpecifiedID(specID, usedElements)) elements.push(specID);\r\n  }\r\n  return elements;\r\n};\r\n\r\nexport const specifiedIDsAreEqual = (\r\n  a: SpecifiedArtworkID,\r\n  b: SpecifiedArtworkID\r\n): boolean => a.source === b.source && a.id === b.id;\r\n\r\nexport const containsSpecifiedID = (\r\n  specID: SpecifiedArtworkID,\r\n  arr: SpecifiedArtworkID[]\r\n): boolean => {\r\n  for (let i = 0; i < arr.length; i++)\r\n    if (specifiedIDsAreEqual(specID, arr[i])) return true;\r\n  return false;\r\n};\r\n\r\nexport const findSpecifiedID = (\r\n  specID: SpecifiedArtworkID,\r\n  arr: SpecifiedArtworkID[]\r\n): number => {\r\n  for (let i = 0; i < arr.length; i++)\r\n    if (specifiedIDsAreEqual(arr[i], specID)) return i;\r\n  return -1;\r\n};\r\n\r\nexport default getRandomSpecifiedIDs;\r\n","import { DataSource, SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\r\n\r\nconst specifyID = (source: DataSource, id: number): SpecifiedArtworkID => ({\r\n  source,\r\n  id,\r\n});\r\n\r\nexport default specifyID;\r\n","import { FC } from 'react';\r\nimport './css/PageTitle.css';\r\n\r\ninterface Props {\r\n  text?: string;\r\n  underlined: boolean;\r\n}\r\n\r\nconst PageTitle: FC<Props> = (props) => (\r\n  <h1 className={`page-title ${props.underlined && 'border-bottom'}`}>\r\n    {props.text || props.children}\r\n  </h1>\r\n);\r\n\r\nexport default PageTitle;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { metApi } from './apis/metApi';\r\nimport { wikiApi } from './apis/wikiApi';\r\nimport favouritesReducer from './feautres/favouritesSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [metApi.reducerPath]: metApi.reducer,\r\n    [wikiApi.reducerPath]: wikiApi.reducer,\r\n    favourites: favouritesReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(metApi.middleware, wikiApi.middleware),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n","import React, { FC } from 'react';\r\nimport { PageType } from '../types/PageType';\r\nimport PageTitle from '../components/PageTitle';\r\nimport '../components/css/PageDescription.css';\r\n\r\ninterface Props {\r\n  pageType: PageType;\r\n}\r\n\r\nconst PageDescription: FC<Props> = (props) => {\r\n  const pageInfos = {\r\n    home: {\r\n      title: 'Explore the world of art',\r\n      description: `Nomen is a website which helps you learn a bit more about diverse \r\n        cultures of humanity by providing a simple way of browsing pieces \r\n        of art from all around the world.`,\r\n    },\r\n    collections: {\r\n      title: 'Collections',\r\n      description: `Collections are randomly generated compilations of varied pieces  \r\n        of art from one of the following categories.`,\r\n    },\r\n    random: {\r\n      title: 'Random',\r\n      description: 'A random piece of art.',\r\n    },\r\n    favourites: {\r\n      title: 'Favourites',\r\n      description: 'Pieces of art you found most interesting or exciting',\r\n    },\r\n    attribution: {\r\n      title: 'Attribution',\r\n      description: '',\r\n    },\r\n  };\r\n\r\n  const heading = pageInfos[props.pageType].title;\r\n  const description = pageInfos[props.pageType].description;\r\n\r\n  return (\r\n    <section id=\"page-description\">\r\n      <PageTitle text={heading} underlined={false} />\r\n      <p className=\"border-top border-bottom\">{description}</p>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PageDescription;\r\n","export enum PageType{\r\n  Home= \"home\",\r\n  Collections = \"collections\",\r\n  Random = \"random\",\r\n  Favourites = \"favourites\",\r\n  Attribution = \"attribution\"\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport {\r\n  containsSpecifiedID,\r\n  findSpecifiedID,\r\n} from '../actions/getRandomSpecifiedIDs';\r\nimport { SpecifiedArtworkID } from '../types/SpecifiedArtworkID';\r\n\r\nconst favourites = localStorage.getItem('favourites');\r\nconst initialState: SpecifiedArtworkID[] = favourites\r\n  ? JSON.parse(favourites)\r\n  : [];\r\n\r\nconst favouritesSlice = createSlice({\r\n  name: 'favourites',\r\n  initialState,\r\n  reducers: {\r\n    addFavourite: (state, action: PayloadAction<SpecifiedArtworkID>) => {\r\n      const specID = action.payload;\r\n      if (containsSpecifiedID(specID, state)) return;\r\n      state.push(specID);\r\n      localStorage.setItem('favourites', JSON.stringify(state));\r\n    },\r\n    removeFavourite: (state, action: PayloadAction<SpecifiedArtworkID>) => {\r\n      const index = findSpecifiedID(action.payload, state);\r\n      if (index === -1) return;\r\n      state.splice(index, 1);\r\n      localStorage.setItem('favourites', JSON.stringify(state));\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addFavourite, removeFavourite } = favouritesSlice.actions;\r\nexport default favouritesSlice.reducer;\r\n","const getRandomNumberInRange = (min: number, max: number): number =>\r\n  Math.floor(Math.random() * (max - min) + min);\r\n\r\nexport default getRandomNumberInRange;\r\n","import getRandomNumberInRange from './getRandomNumberInRange';\r\n\r\nconst getRandomArrayElement = <T>(arr: T[]): T =>\r\n  arr[getRandomNumberInRange(0, arr.length)];\r\n\r\nexport default getRandomArrayElement;\r\n","import React, { FC, ChangeEventHandler, FormEventHandler } from 'react';\nimport './css/SearchBar.css';\n\ninterface Props {\n  size: 'small' | 'normal';\n  value: string;\n  handleSubmit: FormEventHandler<HTMLFormElement>;\n  handleChange: ChangeEventHandler<HTMLInputElement>;\n}\n\nconst SearchBar: FC<Props> = (props) => {\n  const formClass = `search-bar ${props.size}`;\n\n  return (\n    <form className={formClass} onSubmit={props.handleSubmit}>\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={props.handleChange}\n        aria-label=\"search input\"\n      />\n      <button name=\"search button\" aria-label=\"search button\" />\n    </form>\n  );\n};\n\nexport default SearchBar;\n","import React, {\r\n  FC,\r\n  useState,\r\n  ChangeEventHandler,\r\n  FormEventHandler,\r\n} from 'react';\r\nimport SearchBar from '../SearchBar';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst MainSearchBar = React.memo<FC>(() => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (e) =>\r\n    setValue(e.target.value);\r\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (e) => {\r\n    e.preventDefault();\r\n    setValue('');\r\n    if (!value) return;\r\n    navigate(`./search/${value}`);\r\n  };\r\n\r\n  return (\r\n    <SearchBar\r\n      size=\"normal\"\r\n      value={value}\r\n      handleChange={handleChange}\r\n      handleSubmit={handleSubmit}\r\n    />\r\n  );\r\n});\r\n\r\nexport default MainSearchBar;\r\n","export default __webpack_public_path__ + \"static/media/menuRed.c66de543.svg\";","import React, {useRef, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport \"../css/header/Menu.css\";\r\n\r\nconst menuRoot = document.getElementById(\"menu-root\");\r\n\r\nconst Menu = (props) => {\r\n  const isOpen = props.isOpen;\r\n\r\n  const menuRef = useRef(null);\r\n  const menu = menuRef.current;\r\n  useEffect(()=>{\r\n    const handleOutsideClick = (e) => {\r\n      if(isOpen && !menu.contains(e.target)) props.handleOutsideClick();\r\n    };\r\n    window.addEventListener('click', handleOutsideClick);\r\n\r\n    return () => window.removeEventListener('click', handleOutsideClick);\r\n  });\r\n\r\n  const isInitialMount = useRef(true);\r\n  useEffect(()=>{\r\n    if(isInitialMount.current){\r\n      isInitialMount.current = false;\r\n    }else{\r\n      if(isOpen) {\r\n        menu.style.opacity = \"1\";\r\n        menu.style.transform = \"translate(0, 0)\";\r\n      }else{\r\n        menu.style.opacity = \"0.7\";\r\n        menu.style.transform = \"translate(100%, 0)\";\r\n      }\r\n    }\r\n  });\r\n\r\n  return ReactDOM.createPortal(\r\n    <div id=\"menu\" ref={menuRef}>\r\n      {props.children}\r\n    </div>,\r\n    menuRoot\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","export default __webpack_public_path__ + \"static/media/xWhite.a7b0b718.svg\";","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport IconButton from '../IconButton';\r\nimport {ColorName} from '../../types/ColorName';\r\nimport iconSrc from '../../assets/icons/white/xWhite.svg';\r\n\r\nconst MenuCloseButton = (props) =>\r\n    <IconButton size=\"normal\" src={iconSrc}\r\n                hoverIconColor={ColorName.Yellow}\r\n                handleClick={props.handleClick}/>;\r\n\r\nconst MenuItem = (props) => {\r\n  const text = props.text;\r\n\r\n  return (\r\n    <li className=\"menu-item\">\r\n      <Link to={`${text.toLowerCase()}`}>{text}</Link>\r\n    </li>);\r\n};\r\n\r\nconst MenuList = React.memo(() => {\r\n  const itemTexts = [\"Home\", \"Collections\", \"Random\", \"Favourites\", \"Attribution\"];\r\n  const menuItems = itemTexts.map(\r\n    text => <MenuItem key={text} text={text}/>\r\n  );\r\n\r\n  return (\r\n    <nav>\r\n      <ul>{menuItems}</ul>\r\n    </nav>\r\n  );\r\n});\r\n\r\nexport {MenuCloseButton, MenuList};\r\n","import React from 'react';\r\nimport IconButton from '../IconButton';\r\nimport {ColorName} from '../../types/ColorName';\r\nimport iconSrc from '../../assets/icons/red/menuRed.svg';\r\nimport Menu from './Menu';\r\nimport {MenuCloseButton, MenuList} from './MenuContents';\r\n\r\nclass MenuButton extends React.PureComponent{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      isOpen: false\r\n    };\r\n\r\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleOutsideClick(){\r\n    this.setState({\r\n      isOpen: false\r\n    });\r\n  }\r\n\r\n  handleClick(){\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const isOpen = this.state.isOpen;\r\n    return(\r\n      <>\r\n        <IconButton size=\"normal\" src={iconSrc}\r\n                    hoverIconColor={ColorName.White}\r\n                    hoverBackgroundColor={ColorName.Red}\r\n                    handleClick={this.handleClick}/>\r\n\r\n        <Menu isOpen={isOpen} handleOutsideClick={this.handleOutsideClick}>\r\n          <MenuCloseButton handleClick={this.handleClick}/>\r\n          <MenuList/>\r\n        </Menu>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuButton;\r\n","import { Outlet } from 'react-router-dom';\nimport './App.css';\nimport MainSearchBar from './components/header/MainSearchBar';\nimport MenuButton from './components/header/MenuButton';\n\nfunction App() {\n  return (\n    <div id=\"wrapper\">\n      <header>\n        <span id=\"name\">Nomen</span>\n        <div id=\"right-panel\">\n          <MainSearchBar />\n          <MenuButton />\n        </div>\n      </header>\n      <main>\n        <Outlet />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { FC } from 'react';\r\nimport './css/RedButton.css';\r\n\r\ninterface Props{\r\n  text: string;\r\n  size: \"small\" | \"normal\" | \"big\";\r\n  handleClick: () => void;\r\n}\r\n\r\nconst RedButton:FC<Props> = (props) => {\r\n  const className = `red-button ${props.size}`;\r\n\r\n  return (\r\n    <button className={className} onClick={props.handleClick}>\r\n      {props.text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default RedButton;\r\n","import { useNavigate } from 'react-router-dom';\r\nimport RedButton from '../../components/RedButton';\r\n\r\nconst TryNowButton = () => {\r\n  const navigate = useNavigate();\r\n  const handleClick = () => navigate('../collections');\r\n\r\n  return (<RedButton text=\"Try now!\" size=\"big\" handleClick={handleClick}/>);\r\n};\r\n\r\nexport default TryNowButton;\r\n","export default __webpack_public_path__ + \"static/media/ManWithLaptop.eb7d58e1.svg\";","import PageDescription from \"../components/PageDescription\";\r\nimport { PageType } from '../types/PageType';\r\nimport TryNowButton from '../components/home/TryNowButton';\r\nimport src from '../assets/svg/ManWithLaptop.svg';\r\nimport '../pages/css/Home.css';\r\n\r\nconst Home = () => (\r\n  <div id=\"home\">\r\n    <PageDescription pageType={PageType.Home} />\r\n    <div id=\"home-content\">\r\n      <TryNowButton />\r\n      <img src={src} alt=\"Man sitting with a laptop\" />\r\n    </div>\r\n    <div id=\"home-floor\" />\r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport Home from './pages/Home';\nimport { PageLoadingSpinner } from './components/LoadingSpinner';\nimport { CollectionType } from './types/CollectionType';\n\nconst Collections = React.lazy(() => import('./pages/Collections'));\nconst CollectionPage = React.lazy(() => import('./pages/CollectionPage'));\nconst Favourites = React.lazy(() => import('./pages/Favourites'));\nconst ArtworkPageProxy = React.lazy(() => import('./pages/ArtworkPageProxy'));\nconst SearchPage = React.lazy(() => import('./pages/SearchPage'));\nconst RandomArtworkPage = React.lazy(() => import('pages/RandomArtworkPage'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Routes>\n        <Route\n          path=\"MuseumAggregator\"\n          element={\n            <Provider store={store}>\n              <App />\n            </Provider>\n          }\n        >\n          <Route index element={<Home />} />\n          <Route path=\"home\" element={<Home />} />\n          <Route\n            path=\"collections\"\n            element={\n              <React.Suspense fallback={<PageLoadingSpinner />}>\n                <Collections />\n              </React.Suspense>\n            }\n          />\n          <Route\n            path=\"collections/antiquity\"\n            element={\n              <React.Suspense fallback={<PageLoadingSpinner />}>\n                <CollectionPage collection={CollectionType.Antiquity} />\n              </React.Suspense>\n            }\n          />\n          <Route\n            path=\"collections/asia\"\n            element={\n              <React.Suspense fallback={<PageLoadingSpinner />}>\n                <CollectionPage collection={CollectionType.Asia} />\n              </React.Suspense>\n            }\n          />\n          <Route\n            path=\"collections/middle-ages\"\n            element={\n              <React.Suspense fallback={<PageLoadingSpinner />}>\n                <CollectionPage collection={CollectionType.MiddleAges} />\n              </React.Suspense>\n            }\n          />\n          <Route\n            path=\":source/:id\"\n            element={\n              <React.Suspense fallback={<PageLoadingSpinner />}>\n                <ArtworkPageProxy />\n              </React.Suspense>\n            }\n          />\n          <Route\n            path=\"random\"\n            element={\n              <React.Suspense fallback={<PageLoadingSpinner />}>\n                <RandomArtworkPage />\n              </React.Suspense>\n            }\n          />\n          <Route\n            path=\"favourites\"\n            element={\n              <React.Suspense fallback={<PageLoadingSpinner />}>\n                <Favourites />\n              </React.Suspense>\n            }\n          />\n          <Route path=\"attribution\" element={<p>Attribution</p>} />\n          <Route\n            path=\"search/:query\"\n            element={\n              <React.Suspense fallback={<PageLoadingSpinner />}>\n                <SearchPage />\n              </React.Suspense>\n            }\n          />\n          <Route path=\"*\" element={<p>Not found</p>} />\n        </Route>\n      </Routes>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('app-root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}