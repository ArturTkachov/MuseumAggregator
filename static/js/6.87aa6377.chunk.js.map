{"version":3,"sources":["components/preview/ArtworkPreviewInfo.tsx","components/preview/LoadingArtworkPreview.tsx","components/preview/MetArtworkPreview.tsx","components/preview/ArtworkPreviewProxy.tsx","components/preview/ArtworkPreviewsList.tsx","components/WideIconButton.tsx","assets/icons/white/chevronDownWhite.svg","components/LoadMoreButton.tsx","pages/SearchPage.tsx"],"names":["ArtworkPreviewInfo","props","className","artworkName","artworkType","artistName","artworkOrigin","artworkDate","LoadingArtworkPreview","MetArtworkPreview","useGetMetArtworkByIDQuery","id","data","isLoading","onClick","handleClick","src","primaryImageSmall","alt","title","objectName","artistDisplayName","objectDate","country","ArtworkPreviewProxy","CurrentPreview","met","source","navigate","useNavigate","ArtworkPreviewsList","specifiedIDs","map","specID","WideIconButton","backgroundColor","hoverBackgroundColor","LoadMoreButton","loadMoreSrc","ColorName","Yellow","Red","SearchPage","useState","index","setIndex","query","useParams","useGetMetArtworksIDsBySearchQuery","String","skip","Boolean","ids","specIDs","slice","specifyID","text","underlined"],"mappings":"2FACA,iBA0BeA,IAhBuB,SAACC,GACrC,OACE,0BAASC,UAAU,eAAnB,UACE,6BAAKD,EAAME,cACVF,EAAMG,aAAe,+BAAOH,EAAMG,cACnC,4CACWH,EAAMI,WAAaJ,EAAMI,WAAa,oBAEhDJ,EAAMK,eACL,qDAAwBL,EAAMK,iBAEhC,+BAAOL,EAAMM,mB,4KCPJC,EAZmB,kBAChC,qBAAIN,UAAU,0BAAd,UACE,qBAAKA,UAAU,0BACf,qBAAIA,UAAU,uBAAd,UACE,uBACA,uBACA,uBACA,8BCmBSO,G,MAlBsB,SAACR,GACpC,MAA4BS,YAA0BT,EAAMU,IAApDC,EAAR,EAAQA,KAER,OAFA,EAAcC,YAEID,EAAa,cAAC,EAAD,IAE7B,qBAAIV,UAAU,kBAAkBY,QAASb,EAAMc,YAA/C,UACE,qBAAKC,IAAKJ,EAAKK,kBAAmBC,IAAI,YACtC,cAAClB,EAAA,EAAD,CACEG,YAAaS,EAAKO,MAClBf,YAAaQ,EAAKQ,WAClBf,WAAYO,EAAKS,kBACjBd,YAAaK,EAAKU,WAClBhB,cAAeM,EAAKW,e,OCDbC,EAZwB,SAACvB,GACtC,IAGMwB,EAHW,CACfC,IAAKjB,GAEyBR,EAAM0B,QAEhCC,EAAWC,cAGjB,OAAO,cAACJ,EAAD,CAAgBd,GAAIV,EAAMU,GAAII,YAFjB,kBAAMa,EAAS,MAAD,OAAO3B,EAAM0B,OAAb,YAAuB1B,EAAMU,S,MCIlDmB,IAZwB,SAAC7B,GAAD,OACrC,oBAAIU,GAAG,gBAAP,SACGV,EAAM8B,aAAaC,KAAI,SAACC,GAAD,OACtB,cAAC,EAAD,CAEEtB,GAAIsB,EAAOtB,GACXgB,OAAQM,EAAON,QAHjB,UACUM,EAAOtB,IADjB,OACsBsB,EAAON,gB,sDCOpBO,EATmB,SAACjC,GAAD,OAChC,wBACEC,UAAS,8BAAyBD,EAAMkC,gBAA/B,qBAA2DlC,EAAMmC,sBAC1EtB,QAASb,EAAMc,YAFjB,SAIE,qBAAKC,IAAKf,EAAMe,IAAKE,IAAI,mBChBd,MAA0B,6C,QCkB1BmB,IATmB,SAACpC,GAAD,OAChC,cAAC,EAAD,CACEe,IAAKsB,EACLH,gBAAiBI,IAAUC,OAC3BJ,qBAAsBG,IAAUE,IAChC1B,YAAad,EAAMc,gB,uHCkBR2B,UAvBQ,WACrB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEQC,EAAUC,cAAVD,MACR,EAAiCE,YAC/BC,OAAOH,GACP,CAAEI,MAAOC,QAAQL,KAFLM,EAAd,EAAQxC,KAKR,GALA,EAAmBC,UAKJ,OAAO,cAAC,IAAD,IACtB,IAAKuC,EAAK,OAAO,iDACjB,IAAMC,EAAUD,EACbE,MAAMV,EAAOA,EAAQ,IACrBZ,KAAI,SAACrB,GAAD,OAAQ4C,YAAU,MAAO5C,MAChC,OACE,qCACE,cAAC,IAAD,CAAW6C,KAAI,8BAAyBV,GAASW,YAAY,IAC7D,cAAC,IAAD,CAAqB1B,aAAcsB,IACnC,cAAC,IAAD,CAAgBtC,YAAa,kBAAM8B,EAASD,EAAQ","file":"static/js/6.87aa6377.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport '../css/preview/ArtworkPreviewInfo.css';\r\n\r\ninterface Props {\r\n  artworkName: string;\r\n  artworkType?: string;\r\n  artistName: string;\r\n  artworkDate: string;\r\n  artworkOrigin: string;\r\n}\r\n\r\nconst ArtworkPreviewInfo: FC<Props> = (props) => {\r\n  return (\r\n    <section className=\"preview-info\">\r\n      <h2>{props.artworkName}</h2>\r\n      {props.artworkType && <span>{props.artworkType}</span>}\r\n      <span>\r\n        Artist: {props.artistName ? props.artistName : 'Unknown artist'}\r\n      </span>\r\n      {props.artworkOrigin && (\r\n        <span>Place of origin: {props.artworkOrigin}</span>\r\n      )}\r\n      <span>{props.artworkDate}</span>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ArtworkPreviewInfo;\r\n","import { FC } from 'react';\r\nimport '../css/preview/LoadingArtworkPreview.css';\r\n\r\nconst LoadingArtworkPreview: FC = () => (\r\n  <li className=\"loading-artwork-preview\">\r\n    <div className=\"loading-preview-image\" />\r\n    <ul className=\"loading-preview-info\">\r\n      <li />\r\n      <li />\r\n      <li />\r\n      <li />\r\n    </ul>\r\n  </li>\r\n);\r\n\r\nexport default LoadingArtworkPreview;\r\n","import { FC } from 'react';\r\nimport { useGetMetArtworkByIDQuery } from '../../apis/metApi';\r\nimport ArtworkPreviewInfo from '../../components/preview/ArtworkPreviewInfo';\r\nimport LoadingArtworkPreview from './LoadingArtworkPreview';\r\nimport '../css/preview/ArtworkPreview.css';\r\n\r\ninterface Props {\r\n  id: number;\r\n  handleClick: () => void;\r\n}\r\n\r\nconst MetArtworkPreview: FC<Props> = (props) => {\r\n  const { data, isLoading } = useGetMetArtworkByIDQuery(props.id);\r\n\r\n  if (isLoading || !data) return <LoadingArtworkPreview />;\r\n  return (\r\n    <li className=\"artwork-preview\" onClick={props.handleClick}>\r\n      <img src={data.primaryImageSmall} alt=\"artwork\" />\r\n      <ArtworkPreviewInfo\r\n        artworkName={data.title}\r\n        artworkType={data.objectName}\r\n        artistName={data.artistDisplayName}\r\n        artworkDate={data.objectDate}\r\n        artworkOrigin={data.country}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default MetArtworkPreview;\r\n","import { FC } from 'react';\r\nimport MetArtworkPreview from '../../components/preview/MetArtworkPreview';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { DataSource } from '../../types/SpecifiedArtworkID';\r\n\r\ninterface Props {\r\n  source: DataSource;\r\n  id: number;\r\n}\r\n\r\nconst ArtworkPreviewProxy: FC<Props> = (props) => {\r\n  const previews = {\r\n    met: MetArtworkPreview,\r\n  };\r\n  const CurrentPreview = previews[props.source];\r\n\r\n  const navigate = useNavigate();\r\n  const handleClick = () => navigate(`../${props.source}/${props.id}`);\r\n\r\n  return <CurrentPreview id={props.id} handleClick={handleClick} />;\r\n};\r\n\r\nexport default ArtworkPreviewProxy;\r\n","import { FC } from 'react';\r\nimport { SpecifiedArtworkID } from '../../types/SpecifiedArtworkID';\r\nimport ArtworkPreviewProxy from '../../components/preview/ArtworkPreviewProxy';\r\nimport '../css/preview/ArtworkPreviewsList.css';\r\n\r\ninterface Props {\r\n  specifiedIDs: SpecifiedArtworkID[];\r\n}\r\n\r\nconst ArtworkPreviewsList: FC<Props> = (props) => (\r\n  <ul id=\"previews-list\">\r\n    {props.specifiedIDs.map((specID) => (\r\n      <ArtworkPreviewProxy\r\n        key={`${specID.id}${specID.source}`}\r\n        id={specID.id}\r\n        source={specID.source}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default ArtworkPreviewsList;\r\n","import React, { FC } from 'react';\r\nimport { ColorName } from '../types/ColorName';\r\nimport './css/WideIconButton.css';\r\n\r\ninterface Props {\r\n  src: string;\r\n  backgroundColor: ColorName;\r\n  hoverBackgroundColor: ColorName;\r\n  handleClick: () => void;\r\n}\r\n\r\nconst WideIconButton: FC<Props> = (props) => (\r\n  <button\r\n    className={`wide-icon-button bg-${props.backgroundColor} bg-hover-${props.hoverBackgroundColor}`}\r\n    onClick={props.handleClick}\r\n  >\r\n    <img src={props.src} alt=\"icon-button\" />\r\n  </button>\r\n);\r\n\r\nexport default WideIconButton;\r\n","export default __webpack_public_path__ + \"static/media/chevronDownWhite.46f89c78.svg\";","import { FC } from 'react';\nimport WideIconButton from './WideIconButton';\nimport loadMoreSrc from '../assets/icons/white/chevronDownWhite.svg';\nimport { ColorName } from '../types/ColorName';\n\ninterface Props {\n  handleClick: () => void;\n}\n\nconst LoadMoreButton: FC<Props> = (props) => (\n  <WideIconButton\n    src={loadMoreSrc}\n    backgroundColor={ColorName.Yellow}\n    hoverBackgroundColor={ColorName.Red}\n    handleClick={props.handleClick}\n  />\n);\n\nexport default LoadMoreButton;\n","import { FC, useState } from 'react';\nimport PageTitle from '../components/PageTitle';\nimport { useParams } from 'react-router-dom';\nimport ArtworkPreviewsList from '../components/preview/ArtworkPreviewsList';\nimport { useGetMetArtworksIDsBySearchQuery } from '../apis/metApi';\nimport specifyID from '../actions/specifyID';\nimport LoadMoreButton from '../components/LoadMoreButton';\nimport { PageLoadingSpinner } from '../components/LoadingSpinner';\n\nconst SearchPage: FC = () => {\n  const [index, setIndex] = useState(0);\n\n  const { query } = useParams();\n  const { data: ids, isLoading } = useGetMetArtworksIDsBySearchQuery(\n    String(query),\n    { skip: !Boolean(query) }\n  );\n\n  if (isLoading) return <PageLoadingSpinner />;\n  if (!ids) return <p>No results found</p>;\n  const specIDs = ids\n    .slice(index, index + 15)\n    .map((id) => specifyID('met', id));\n  return (\n    <>\n      <PageTitle text={`Search results for: ${query}`} underlined={true} />\n      <ArtworkPreviewsList specifiedIDs={specIDs} />\n      <LoadMoreButton handleClick={() => setIndex(index + 5)} />\n    </>\n  );\n};\n\nexport default SearchPage;\n"],"sourceRoot":""}